
Winder2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00000794  00000828  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000794  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000034  00800150  00800150  00000878  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000ee  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068e  00000000  00000000  000009e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000275  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009cd  00000000  00000000  000012e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000326  00000000  00000000  00001d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000284  00000000  00000000  000020be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00002342  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
/*************************************************************************
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e9       	ldi	r30, 0x94	; 148
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a0 35       	cpi	r26, 0x50	; 80
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e5       	ldi	r26, 0x50	; 80
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 38       	cpi	r26, 0x84	; 132
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 14 02 	call	0x428	; 0x428 <main>
  9e:	0c 94 c8 03 	jmp	0x790	; 0x790 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z8read_adch>:
uint8_t Button = btnNONE;	

// Read the AD conversion result
unsigned int read_adc(unsigned char adc_input)
	{
		ADMUX=adc_input | ADC_VREF_TYPE;
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
  ac:	85 e3       	ldi	r24, 0x35	; 53
  ae:	8a 95       	dec	r24
  b0:	f1 f7       	brne	.-4      	; 0xae <_Z8read_adch+0x8>
		// Delay needed for the stabilization of the ADC input voltage
		_delay_us(10);
		// Start the AD conversion
		ADCSRA|=(1<<ADSC);
  b2:	ea e7       	ldi	r30, 0x7A	; 122
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	80 83       	st	Z, r24
		// Wait for the AD conversion to complete
		while ((ADCSRA & (1<<ADIF))==0);
  bc:	80 81       	ld	r24, Z
  be:	84 ff       	sbrs	r24, 4
  c0:	fd cf       	rjmp	.-6      	; 0xbc <_Z8read_adch+0x16>
		ADCSRA|=(1<<ADIF);
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 61       	ori	r24, 0x10	; 16
  ca:	80 83       	st	Z, r24
		return ADCW;
  cc:	20 91 78 00 	lds	r18, 0x0078
  d0:	30 91 79 00 	lds	r19, 0x0079
	}
  d4:	82 2f       	mov	r24, r18
  d6:	93 2f       	mov	r25, r19
  d8:	08 95       	ret

000000da <_Z16read_LCD_buttonsv>:

// read the buttons
int read_LCD_buttons()
	{
		int adc_key_in  = 0;
		adc_key_in = read_adc(0);      // read the value from the sensor 
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z8read_adch>
		// my buttons when read are centered at these valies: 0, 144, 329, 504, 741
		// we add approx 50 to those values and check to see if we are close
		if (adc_key_in > 1000) return btnNONE; // We make this the 1st option for speed reasons since it will be the most likely result
  e0:	23 e0       	ldi	r18, 0x03	; 3
  e2:	89 3e       	cpi	r24, 0xE9	; 233
  e4:	92 07       	cpc	r25, r18
  e6:	04 f5       	brge	.+64     	; 0x128 <_Z16read_LCD_buttonsv+0x4e>
		// For V1.1 us this threshold
		if (adc_key_in < 50)   return btnRIGHT;  
  e8:	82 33       	cpi	r24, 0x32	; 50
  ea:	91 05       	cpc	r25, r1
  ec:	1c f4       	brge	.+6      	; 0xf4 <_Z16read_LCD_buttonsv+0x1a>
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	1c c0       	rjmp	.+56     	; 0x12c <_Z16read_LCD_buttonsv+0x52>
		if (adc_key_in < 250)  return btnUP; 
  f4:	8a 3f       	cpi	r24, 0xFA	; 250
  f6:	91 05       	cpc	r25, r1
  f8:	1c f4       	brge	.+6      	; 0x100 <_Z16read_LCD_buttonsv+0x26>
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	16 c0       	rjmp	.+44     	; 0x12c <_Z16read_LCD_buttonsv+0x52>
		if (adc_key_in < 450)  return btnDOWN; 
 100:	21 e0       	ldi	r18, 0x01	; 1
 102:	82 3c       	cpi	r24, 0xC2	; 194
 104:	92 07       	cpc	r25, r18
 106:	1c f4       	brge	.+6      	; 0x10e <_Z16read_LCD_buttonsv+0x34>
 108:	22 e0       	ldi	r18, 0x02	; 2
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	0f c0       	rjmp	.+30     	; 0x12c <_Z16read_LCD_buttonsv+0x52>
		if (adc_key_in < 650)  return btnLEFT; 
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	8a 38       	cpi	r24, 0x8A	; 138
 112:	92 07       	cpc	r25, r18
 114:	1c f4       	brge	.+6      	; 0x11c <_Z16read_LCD_buttonsv+0x42>
 116:	23 e0       	ldi	r18, 0x03	; 3
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	08 c0       	rjmp	.+16     	; 0x12c <_Z16read_LCD_buttonsv+0x52>
		if (adc_key_in < 850)  return btnSELECT;  
 11c:	82 55       	subi	r24, 0x52	; 82
 11e:	93 40       	sbci	r25, 0x03	; 3
 120:	1c f4       	brge	.+6      	; 0x128 <_Z16read_LCD_buttonsv+0x4e>
 122:	24 e0       	ldi	r18, 0x04	; 4
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <_Z16read_LCD_buttonsv+0x52>
 128:	25 e0       	ldi	r18, 0x05	; 5
 12a:	30 e0       	ldi	r19, 0x00	; 0

		return btnNONE;  // when all others fail, return this...
	}
 12c:	82 2f       	mov	r24, r18
 12e:	93 2f       	mov	r25, r19
 130:	08 95       	ret

00000132 <_ZL9lcd_writehh>:
Input:    data   byte to write to LCD
          rs     1: write data
                 0: write instruction
Returns:  none
*************************************************************************/
static void lcd_write(uint8_t data,uint8_t rs)
 132:	28 2f       	mov	r18, r24
          Delay_us(5);
          PrevCmdInvolvedAddressCounter=0;
        }
    #endif

    if (rs)
 134:	66 23       	and	r22, r22
 136:	31 f0       	breq	.+12     	; 0x144 <_ZL9lcd_writehh+0x12>
      {
        lcd_rs_port_high();                            // RS=1: Write Character
 138:	eb e2       	ldi	r30, 0x2B	; 43
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	81 60       	ori	r24, 0x01	; 1
 140:	80 83       	st	Z, r24
 142:	05 c0       	rjmp	.+10     	; 0x14e <_ZL9lcd_writehh+0x1c>
        PrevCmdInvolvedAddressCounter=1;
        #endif
      }
    else
      {
        lcd_rs_port_low();                          // RS=0: Write Command
 144:	eb e2       	ldi	r30, 0x2B	; 43
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	8e 7f       	andi	r24, 0xFE	; 254
 14c:	80 83       	st	Z, r24
        PrevCmdInvolvedAddressCounter=0;
        #endif
      }

    #if LCD_BITS==4
      lcd_db7_port_set(data&_BV(7));                  //Output High Nibble
 14e:	22 23       	and	r18, r18
 150:	34 f4       	brge	.+12     	; 0x15e <_ZL9lcd_writehh+0x2c>
 152:	eb e2       	ldi	r30, 0x2B	; 43
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	80 68       	ori	r24, 0x80	; 128
 15a:	80 83       	st	Z, r24
 15c:	05 c0       	rjmp	.+10     	; 0x168 <_ZL9lcd_writehh+0x36>
 15e:	eb e2       	ldi	r30, 0x2B	; 43
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	8f 77       	andi	r24, 0x7F	; 127
 166:	80 83       	st	Z, r24
      lcd_db6_port_set(data&_BV(6));
 168:	92 2f       	mov	r25, r18
 16a:	26 ff       	sbrs	r18, 6
 16c:	06 c0       	rjmp	.+12     	; 0x17a <_ZL9lcd_writehh+0x48>
 16e:	eb e2       	ldi	r30, 0x2B	; 43
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	80 64       	ori	r24, 0x40	; 64
 176:	80 83       	st	Z, r24
 178:	05 c0       	rjmp	.+10     	; 0x184 <_ZL9lcd_writehh+0x52>
 17a:	eb e2       	ldi	r30, 0x2B	; 43
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	8f 7b       	andi	r24, 0xBF	; 191
 182:	80 83       	st	Z, r24
      lcd_db5_port_set(data&_BV(5));
 184:	95 ff       	sbrs	r25, 5
 186:	06 c0       	rjmp	.+12     	; 0x194 <_ZL9lcd_writehh+0x62>
 188:	eb e2       	ldi	r30, 0x2B	; 43
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	80 62       	ori	r24, 0x20	; 32
 190:	80 83       	st	Z, r24
 192:	05 c0       	rjmp	.+10     	; 0x19e <_ZL9lcd_writehh+0x6c>
 194:	eb e2       	ldi	r30, 0x2B	; 43
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	8f 7d       	andi	r24, 0xDF	; 223
 19c:	80 83       	st	Z, r24
      lcd_db4_port_set(data&_BV(4));
 19e:	94 ff       	sbrs	r25, 4
 1a0:	06 c0       	rjmp	.+12     	; 0x1ae <_ZL9lcd_writehh+0x7c>
 1a2:	eb e2       	ldi	r30, 0x2B	; 43
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	80 61       	ori	r24, 0x10	; 16
 1aa:	80 83       	st	Z, r24
 1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <_ZL9lcd_writehh+0x86>
 1ae:	eb e2       	ldi	r30, 0x2B	; 43
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	8f 7e       	andi	r24, 0xEF	; 239
 1b6:	80 83       	st	Z, r24

      Delay_ns(100);
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <_ZL9lcd_writehh+0x88>
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 1ba:	eb e2       	ldi	r30, 0x2B	; 43
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	84 60       	ori	r24, 0x04	; 4
 1c2:	80 83       	st	Z, r24
      lcd_db4_port_set(data&_BV(4));

      Delay_ns(100);
      lcd_e_port_high();

      Delay_ns(500);
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <_ZL9lcd_writehh+0x94>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <_ZL9lcd_writehh+0x9a>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 1cc:	80 81       	ld	r24, Z
 1ce:	8b 7f       	andi	r24, 0xFB	; 251
 1d0:	80 83       	st	Z, r24
      lcd_e_port_high();

      Delay_ns(500);
      lcd_e_port_low();

      lcd_db7_port_set(data&_BV(3));                  //Output High Nibble
 1d2:	93 ff       	sbrs	r25, 3
 1d4:	04 c0       	rjmp	.+8      	; 0x1de <_ZL9lcd_writehh+0xac>
 1d6:	80 81       	ld	r24, Z
 1d8:	80 68       	ori	r24, 0x80	; 128
 1da:	80 83       	st	Z, r24
 1dc:	05 c0       	rjmp	.+10     	; 0x1e8 <_ZL9lcd_writehh+0xb6>
 1de:	eb e2       	ldi	r30, 0x2B	; 43
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	8f 77       	andi	r24, 0x7F	; 127
 1e6:	80 83       	st	Z, r24
      lcd_db6_port_set(data&_BV(2));
 1e8:	92 ff       	sbrs	r25, 2
 1ea:	06 c0       	rjmp	.+12     	; 0x1f8 <_ZL9lcd_writehh+0xc6>
 1ec:	eb e2       	ldi	r30, 0x2B	; 43
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	80 64       	ori	r24, 0x40	; 64
 1f4:	80 83       	st	Z, r24
 1f6:	05 c0       	rjmp	.+10     	; 0x202 <_ZL9lcd_writehh+0xd0>
 1f8:	eb e2       	ldi	r30, 0x2B	; 43
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	8f 7b       	andi	r24, 0xBF	; 191
 200:	80 83       	st	Z, r24
      lcd_db5_port_set(data&_BV(1));
 202:	91 ff       	sbrs	r25, 1
 204:	06 c0       	rjmp	.+12     	; 0x212 <_ZL9lcd_writehh+0xe0>
 206:	eb e2       	ldi	r30, 0x2B	; 43
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	80 62       	ori	r24, 0x20	; 32
 20e:	80 83       	st	Z, r24
 210:	05 c0       	rjmp	.+10     	; 0x21c <_ZL9lcd_writehh+0xea>
 212:	eb e2       	ldi	r30, 0x2B	; 43
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	8f 7d       	andi	r24, 0xDF	; 223
 21a:	80 83       	st	Z, r24
      lcd_db4_port_set(data&_BV(0));
 21c:	90 ff       	sbrs	r25, 0
 21e:	06 c0       	rjmp	.+12     	; 0x22c <_ZL9lcd_writehh+0xfa>
 220:	eb e2       	ldi	r30, 0x2B	; 43
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	80 61       	ori	r24, 0x10	; 16
 228:	80 83       	st	Z, r24
 22a:	05 c0       	rjmp	.+10     	; 0x236 <_ZL9lcd_writehh+0x104>
 22c:	eb e2       	ldi	r30, 0x2B	; 43
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	8f 7e       	andi	r24, 0xEF	; 239
 234:	80 83       	st	Z, r24

      Delay_ns(100);
 236:	00 c0       	rjmp	.+0      	; 0x238 <_ZL9lcd_writehh+0x106>
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 238:	eb e2       	ldi	r30, 0x2B	; 43
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	84 60       	ori	r24, 0x04	; 4
 240:	80 83       	st	Z, r24
      lcd_db4_port_set(data&_BV(0));

      Delay_ns(100);
      lcd_e_port_high();

      Delay_ns(500);
 242:	92 e0       	ldi	r25, 0x02	; 2
 244:	9a 95       	dec	r25
 246:	f1 f7       	brne	.-4      	; 0x244 <_ZL9lcd_writehh+0x112>
 248:	00 c0       	rjmp	.+0      	; 0x24a <_ZL9lcd_writehh+0x118>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 24a:	80 81       	ld	r24, Z
 24c:	8b 7f       	andi	r24, 0xFB	; 251
 24e:	80 83       	st	Z, r24
      lcd_e_port_high();

      Delay_ns(500);
      lcd_e_port_low();

      lcd_db7_port_high();                            // All Data Pins High (Inactive)
 250:	80 81       	ld	r24, Z
 252:	80 68       	ori	r24, 0x80	; 128
 254:	80 83       	st	Z, r24
      lcd_db6_port_high();
 256:	80 81       	ld	r24, Z
 258:	80 64       	ori	r24, 0x40	; 64
 25a:	80 83       	st	Z, r24
      lcd_db5_port_high();
 25c:	80 81       	ld	r24, Z
 25e:	80 62       	ori	r24, 0x20	; 32
 260:	80 83       	st	Z, r24
      lcd_db4_port_high();
 262:	80 81       	ld	r24, Z
 264:	80 61       	ori	r24, 0x10	; 16
 266:	80 83       	st	Z, r24
      lcd_db1_port_high();
      lcd_db0_port_high();
    #endif

    #if (WAIT_MODE==0 || RW_LINE_IMPLEMENTED==0)
      if (!rs && data<=((1<<LCD_CLR) | (1<<LCD_HOME))) // Is command clrscr or home?
 268:	66 23       	and	r22, r22
 26a:	49 f4       	brne	.+18     	; 0x27e <_ZL9lcd_writehh+0x14c>
 26c:	24 30       	cpi	r18, 0x04	; 4
 26e:	38 f4       	brcc	.+14     	; 0x27e <_ZL9lcd_writehh+0x14c>
        Delay_us(1640);
 270:	8f e9       	ldi	r24, 0x9F	; 159
 272:	99 e1       	ldi	r25, 0x19	; 25
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <_ZL9lcd_writehh+0x142>
 278:	00 c0       	rjmp	.+0      	; 0x27a <_ZL9lcd_writehh+0x148>
 27a:	00 00       	nop
 27c:	08 95       	ret
      else Delay_us(40);
 27e:	95 ed       	ldi	r25, 0xD5	; 213
 280:	9a 95       	dec	r25
 282:	f1 f7       	brne	.-4      	; 0x280 <_ZL9lcd_writehh+0x14e>
 284:	00 00       	nop
 286:	08 95       	ret

00000288 <_Z8lcd_putcc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/
void lcd_putc(char c)
  {
    lcd_write(c,1);
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	0e 94 99 00 	call	0x132	; 0x132 <_ZL9lcd_writehh>
  }
 28e:	08 95       	ret

00000290 <_Z8lcd_putsPKc>:
/*************************************************************************
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	fc 01       	movw	r30, r24
  {
    register char c;

    while ((c=*s++)) 
 296:	80 81       	ld	r24, Z
 298:	88 23       	and	r24, r24
 29a:	39 f0       	breq	.+14     	; 0x2aa <_Z8lcd_putsPKc+0x1a>
 29c:	ef 01       	movw	r28, r30
      lcd_putc(c);
 29e:	0e 94 44 01 	call	0x288	; 0x288 <_Z8lcd_putcc>
*************************************************************************/
void lcd_puts(const char *s)
  {
    register char c;

    while ((c=*s++)) 
 2a2:	89 81       	ldd	r24, Y+1	; 0x01
 2a4:	21 96       	adiw	r28, 0x01	; 1
 2a6:	88 23       	and	r24, r24
 2a8:	d1 f7       	brne	.-12     	; 0x29e <_Z8lcd_putsPKc+0xe>
      lcd_putc(c);
  }
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <_Z11lcd_commandh>:
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
  {
    lcd_write(cmd,0);
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	0e 94 99 00 	call	0x132	; 0x132 <_ZL9lcd_writehh>
  }
 2b6:	08 95       	ret

000002b8 <_Z10lcd_clrscrv>:
Input:    none
Returns:  none
*************************************************************************/
void lcd_clrscr()
  {
    lcd_command(1<<LCD_CLR);
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 58 01 	call	0x2b0	; 0x2b0 <_Z11lcd_commandh>
  }
 2be:	08 95       	ret

000002c0 <_Z8lcd_gotoh>:
Input:    pos position
Returns:  none
*************************************************************************/
void lcd_goto(uint8_t pos)
  {
    lcd_command((1<<LCD_DDRAM)+pos);
 2c0:	80 58       	subi	r24, 0x80	; 128
 2c2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <_Z11lcd_commandh>
  }
 2c6:	08 95       	ret

000002c8 <_Z7AfisareiPc>:
	
void Afisare(int Cursor, char* Date_Afisare)
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	8b 01       	movw	r16, r22
	{
		lcd_goto(Cursor);
 2ce:	0e 94 60 01 	call	0x2c0	; 0x2c0 <_Z8lcd_gotoh>
		lcd_puts(Date_Afisare);
 2d2:	c8 01       	movw	r24, r16
 2d4:	0e 94 48 01 	call	0x290	; 0x290 <_Z8lcd_putsPKc>
	}	
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	08 95       	ret

000002de <_Z8lcd_initv>:
      case 4 : DDR(LCD_E4_PORT)|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                DDR(LCD_E_PORT)|=_BV(LCD_E_PIN);
 2de:	ea e2       	ldi	r30, 0x2A	; 42
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	84 60       	ori	r24, 0x04	; 4
 2e6:	80 83       	st	Z, r24
*************************************************************************/
void lcd_init()
  {
    //Set All Pins as Output
    lcd_e_ddr_high();
    lcd_rs_ddr_high();
 2e8:	80 81       	ld	r24, Z
 2ea:	81 60       	ori	r24, 0x01	; 1
 2ec:	80 83       	st	Z, r24
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_ddr_high();
    #endif
    lcd_db7_ddr_high();
 2ee:	80 81       	ld	r24, Z
 2f0:	80 68       	ori	r24, 0x80	; 128
 2f2:	80 83       	st	Z, r24
    lcd_db6_ddr_high();
 2f4:	80 81       	ld	r24, Z
 2f6:	80 64       	ori	r24, 0x40	; 64
 2f8:	80 83       	st	Z, r24
    lcd_db5_ddr_high();
 2fa:	80 81       	ld	r24, Z
 2fc:	80 62       	ori	r24, 0x20	; 32
 2fe:	80 83       	st	Z, r24
    lcd_db4_ddr_high();
 300:	80 81       	ld	r24, Z
 302:	80 61       	ori	r24, 0x10	; 16
 304:	80 83       	st	Z, r24
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 306:	eb e2       	ldi	r30, 0x2B	; 43
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	80 81       	ld	r24, Z
 30c:	8b 7f       	andi	r24, 0xFB	; 251
 30e:	80 83       	st	Z, r24
      lcd_db0_ddr_high();
    #endif

    //Set All Control Lines Low
    lcd_e_port_low();
    lcd_rs_port_low();
 310:	80 81       	ld	r24, Z
 312:	8e 7f       	andi	r24, 0xFE	; 254
 314:	80 83       	st	Z, r24
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_port_low();
    #endif

    //Set All Data Lines High
    lcd_db7_port_high();
 316:	80 81       	ld	r24, Z
 318:	80 68       	ori	r24, 0x80	; 128
 31a:	80 83       	st	Z, r24
    lcd_db6_port_high();
 31c:	80 81       	ld	r24, Z
 31e:	80 64       	ori	r24, 0x40	; 64
 320:	80 83       	st	Z, r24
    lcd_db5_port_high();
 322:	80 81       	ld	r24, Z
 324:	80 62       	ori	r24, 0x20	; 32
 326:	80 83       	st	Z, r24
    lcd_db4_port_high();
 328:	80 81       	ld	r24, Z
 32a:	80 61       	ori	r24, 0x10	; 16
 32c:	80 83       	st	Z, r24
      lcd_db1_port_high();
      lcd_db0_port_high();
    #endif

    //Startup Delay
    Delay_ms(DELAY_RESET);
 32e:	8f e5       	ldi	r24, 0x5F	; 95
 330:	9a ee       	ldi	r25, 0xEA	; 234
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <_Z8lcd_initv+0x54>
 336:	00 c0       	rjmp	.+0      	; 0x338 <_Z8lcd_initv+0x5a>
 338:	00 00       	nop

    //Initialize Display
    lcd_db7_port_low();
 33a:	80 81       	ld	r24, Z
 33c:	8f 77       	andi	r24, 0x7F	; 127
 33e:	80 83       	st	Z, r24
    lcd_db6_port_low();
 340:	80 81       	ld	r24, Z
 342:	8f 7b       	andi	r24, 0xBF	; 191
 344:	80 83       	st	Z, r24
    Delay_ns(100);
 346:	00 c0       	rjmp	.+0      	; 0x348 <_Z8lcd_initv+0x6a>
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 348:	80 81       	ld	r24, Z
 34a:	84 60       	ori	r24, 0x04	; 4
 34c:	80 83       	st	Z, r24
    //Initialize Display
    lcd_db7_port_low();
    lcd_db6_port_low();
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
 34e:	92 e0       	ldi	r25, 0x02	; 2
 350:	9a 95       	dec	r25
 352:	f1 f7       	brne	.-4      	; 0x350 <_Z8lcd_initv+0x72>
 354:	00 c0       	rjmp	.+0      	; 0x356 <_Z8lcd_initv+0x78>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 356:	80 81       	ld	r24, Z
 358:	8b 7f       	andi	r24, 0xFB	; 251
 35a:	80 83       	st	Z, r24
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();

    Delay_us(4100);
 35c:	8f e0       	ldi	r24, 0x0F	; 15
 35e:	90 e4       	ldi	r25, 0x40	; 64
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <_Z8lcd_initv+0x82>
 364:	00 c0       	rjmp	.+0      	; 0x366 <_Z8lcd_initv+0x88>
 366:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 368:	80 81       	ld	r24, Z
 36a:	84 60       	ori	r24, 0x04	; 4
 36c:	80 83       	st	Z, r24
    lcd_e_port_low();

    Delay_us(4100);

    lcd_e_port_high();
    Delay_ns(500);
 36e:	92 e0       	ldi	r25, 0x02	; 2
 370:	9a 95       	dec	r25
 372:	f1 f7       	brne	.-4      	; 0x370 <_Z8lcd_initv+0x92>
 374:	00 c0       	rjmp	.+0      	; 0x376 <_Z8lcd_initv+0x98>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 376:	80 81       	ld	r24, Z
 378:	8b 7f       	andi	r24, 0xFB	; 251
 37a:	80 83       	st	Z, r24

    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();

    Delay_us(100);
 37c:	8f e8       	ldi	r24, 0x8F	; 143
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <_Z8lcd_initv+0xa2>
 384:	00 c0       	rjmp	.+0      	; 0x386 <_Z8lcd_initv+0xa8>
 386:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 388:	80 81       	ld	r24, Z
 38a:	84 60       	ori	r24, 0x04	; 4
 38c:	80 83       	st	Z, r24
    lcd_e_port_low();

    Delay_us(100);

    lcd_e_port_high();
    Delay_ns(500);
 38e:	92 e0       	ldi	r25, 0x02	; 2
 390:	9a 95       	dec	r25
 392:	f1 f7       	brne	.-4      	; 0x390 <_Z8lcd_initv+0xb2>
 394:	00 c0       	rjmp	.+0      	; 0x396 <_Z8lcd_initv+0xb8>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 396:	80 81       	ld	r24, Z
 398:	8b 7f       	andi	r24, 0xFB	; 251
 39a:	80 83       	st	Z, r24

    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();

    Delay_us(40);
 39c:	85 ed       	ldi	r24, 0xD5	; 213
 39e:	8a 95       	dec	r24
 3a0:	f1 f7       	brne	.-4      	; 0x39e <_Z8lcd_initv+0xc0>
 3a2:	00 00       	nop

    //Init differs between 4-bit and 8-bit from here
    #if (LCD_BITS==4)
      lcd_db4_port_low();
 3a4:	80 81       	ld	r24, Z
 3a6:	8f 7e       	andi	r24, 0xEF	; 239
 3a8:	80 83       	st	Z, r24
      Delay_ns(100);
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <_Z8lcd_initv+0xce>
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 3ac:	80 81       	ld	r24, Z
 3ae:	84 60       	ori	r24, 0x04	; 4
 3b0:	80 83       	st	Z, r24
    //Init differs between 4-bit and 8-bit from here
    #if (LCD_BITS==4)
      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
 3b2:	92 e0       	ldi	r25, 0x02	; 2
 3b4:	9a 95       	dec	r25
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <_Z8lcd_initv+0xd6>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <_Z8lcd_initv+0xdc>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 3ba:	80 81       	ld	r24, Z
 3bc:	8b 7f       	andi	r24, 0xFB	; 251
 3be:	80 83       	st	Z, r24
      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
      lcd_e_port_low();
      Delay_us(40);
 3c0:	85 ed       	ldi	r24, 0xD5	; 213
 3c2:	8a 95       	dec	r24
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <_Z8lcd_initv+0xe4>
 3c6:	00 00       	nop

      lcd_db4_port_low();
 3c8:	80 81       	ld	r24, Z
 3ca:	8f 7e       	andi	r24, 0xEF	; 239
 3cc:	80 83       	st	Z, r24
      Delay_ns(100);
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <_Z8lcd_initv+0xf2>
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 3d0:	80 81       	ld	r24, Z
 3d2:	84 60       	ori	r24, 0x04	; 4
 3d4:	80 83       	st	Z, r24
      Delay_us(40);

      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
 3d6:	92 e0       	ldi	r25, 0x02	; 2
 3d8:	9a 95       	dec	r25
 3da:	f1 f7       	brne	.-4      	; 0x3d8 <_Z8lcd_initv+0xfa>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <_Z8lcd_initv+0x100>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 3de:	80 81       	ld	r24, Z
 3e0:	8b 7f       	andi	r24, 0xFB	; 251
 3e2:	80 83       	st	Z, r24
      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
      lcd_e_port_low();
      Delay_ns(500);
 3e4:	82 e0       	ldi	r24, 0x02	; 2
 3e6:	8a 95       	dec	r24
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <_Z8lcd_initv+0x108>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <_Z8lcd_initv+0x10e>

      #if (LCD_DISPLAYS==1)
        if (LCD_DISPLAY_LINES>1)
          lcd_db7_port_high();
 3ec:	80 81       	ld	r24, Z
 3ee:	80 68       	ori	r24, 0x80	; 128
 3f0:	80 83       	st	Z, r24
          }
        if (c>1)
          lcd_db7_port_high();
      #endif

      Delay_ns(100);
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <_Z8lcd_initv+0x116>
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 3f4:	80 81       	ld	r24, Z
 3f6:	84 60       	ori	r24, 0x04	; 4
 3f8:	80 83       	st	Z, r24
          lcd_db7_port_high();
      #endif

      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
 3fa:	92 e0       	ldi	r25, 0x02	; 2
 3fc:	9a 95       	dec	r25
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <_Z8lcd_initv+0x11e>
 400:	00 c0       	rjmp	.+0      	; 0x402 <_Z8lcd_initv+0x124>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 402:	80 81       	ld	r24, Z
 404:	8b 7f       	andi	r24, 0xFB	; 251
 406:	80 83       	st	Z, r24

      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
      lcd_e_port_low();
      Delay_us(40);
 408:	85 ed       	ldi	r24, 0xD5	; 213
 40a:	8a 95       	dec	r24
 40c:	f1 f7       	brne	.-4      	; 0x40a <_Z8lcd_initv+0x12c>
 40e:	00 00       	nop
      lcd_e_port_low();
      Delay_us(40);
    #endif

    //Display Off
    lcd_command(_BV(LCD_DISPLAYMODE));
 410:	88 e0       	ldi	r24, 0x08	; 8
 412:	0e 94 58 01 	call	0x2b0	; 0x2b0 <_Z11lcd_commandh>

    //Display Clear
    lcd_clrscr();
 416:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <_Z10lcd_clrscrv>

    //Entry Mode Set
    lcd_command(_BV(LCD_ENTRY_MODE) | _BV(LCD_ENTRY_INC));
 41a:	86 e0       	ldi	r24, 0x06	; 6
 41c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <_Z11lcd_commandh>

    //Display On
    lcd_command(_BV(LCD_DISPLAYMODE) | _BV(LCD_DISPLAYMODE_ON));
 420:	8c e0       	ldi	r24, 0x0C	; 12
 422:	0e 94 58 01 	call	0x2b0	; 0x2b0 <_Z11lcd_commandh>
  }
 426:	08 95       	ret

00000428 <main>:
	lcd_clrscr();
	_delay_ms(400);


}	
int main(void)
 428:	2f 92       	push	r2
 42a:	3f 92       	push	r3
 42c:	4f 92       	push	r4
 42e:	5f 92       	push	r5
 430:	6f 92       	push	r6
 432:	7f 92       	push	r7
 434:	8f 92       	push	r8
 436:	9f 92       	push	r9
 438:	af 92       	push	r10
 43a:	bf 92       	push	r11
 43c:	cf 92       	push	r12
 43e:	df 92       	push	r13
 440:	ef 92       	push	r14
 442:	ff 92       	push	r15
 444:	0f 93       	push	r16
 446:	1f 93       	push	r17
 448:	cf 93       	push	r28
 44a:	df 93       	push	r29
	{
		// Input/Output Ports initialization
		// Port B initialization
		// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
		DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
 44c:	14 b8       	out	0x04, r1	; 4
		// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
		PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
 44e:	15 b8       	out	0x05, r1	; 5

		// Port C initialization
		// Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
		DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
 450:	17 b8       	out	0x07, r1	; 7
		// State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
		PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
 452:	18 b8       	out	0x08, r1	; 8

		// Port D initialization
		// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
		DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
 454:	aa e2       	ldi	r26, 0x2A	; 42
 456:	b0 e0       	ldi	r27, 0x00	; 0
 458:	1c 92       	st	X, r1
		// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
		PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
 45a:	1b b8       	out	0x0b, r1	; 11
		// Clock source: System Clock
		// Clock value: Timer 0 Stopped
		// Mode: Normal top=0xFF
		// OC0A output: Disconnected
		// OC0B output: Disconnected
		TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
 45c:	14 bc       	out	0x24, r1	; 36
		TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
 45e:	15 bc       	out	0x25, r1	; 37
		TCNT0=0x00;
 460:	16 bc       	out	0x26, r1	; 38
		OCR0A=0x00;
 462:	17 bc       	out	0x27, r1	; 39
		OCR0B=0x00;
 464:	18 bc       	out	0x28, r1	; 40
		// Input Capture on Falling Edge
		// Timer1 Overflow Interrupt: Off
		// Input Capture Interrupt: Off
		// Compare A Match Interrupt: Off
		// Compare B Match Interrupt: Off
		TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
 466:	10 92 80 00 	sts	0x0080, r1
		TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
 46a:	10 92 81 00 	sts	0x0081, r1
		TCNT1H=0x00;
 46e:	10 92 85 00 	sts	0x0085, r1
		TCNT1L=0x00;
 472:	10 92 84 00 	sts	0x0084, r1
		ICR1H=0x00;
 476:	10 92 87 00 	sts	0x0087, r1
		ICR1L=0x00;
 47a:	10 92 86 00 	sts	0x0086, r1
		OCR1AH=0x00;
 47e:	10 92 89 00 	sts	0x0089, r1
		OCR1AL=0x00;
 482:	10 92 88 00 	sts	0x0088, r1
		OCR1BH=0x00;
 486:	10 92 8b 00 	sts	0x008B, r1
		OCR1BL=0x00;
 48a:	10 92 8a 00 	sts	0x008A, r1
		// Clock source: System Clock
		// Clock value: Timer2 Stopped
		// Mode: Normal top=0xFF
		// OC2A output: Disconnected
		// OC2B output: Disconnected
		ASSR=(0<<EXCLK) | (0<<AS2);
 48e:	10 92 b6 00 	sts	0x00B6, r1
		TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
 492:	10 92 b0 00 	sts	0x00B0, r1
		TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
 496:	10 92 b1 00 	sts	0x00B1, r1
		TCNT2=0x00;
 49a:	10 92 b2 00 	sts	0x00B2, r1
		OCR2A=0x00;
 49e:	10 92 b3 00 	sts	0x00B3, r1
		OCR2B=0x00;
 4a2:	10 92 b4 00 	sts	0x00B4, r1

		// Timer/Counter 0 Interrupt(s) initialization
		TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
 4a6:	10 92 6e 00 	sts	0x006E, r1

		// Timer/Counter 1 Interrupt(s) initialization
		TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
 4aa:	10 92 6f 00 	sts	0x006F, r1

		// Timer/Counter 2 Interrupt(s) initialization
		TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
 4ae:	10 92 70 00 	sts	0x0070, r1
		// INT0: Off
		// INT1: Off
		// Interrupt on any change on pins PCINT0-7: Off
		// Interrupt on any change on pins PCINT8-14: Off
		// Interrupt on any change on pins PCINT16-23: Off
		EICRA=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
 4b2:	10 92 69 00 	sts	0x0069, r1
		EIMSK=(0<<INT1) | (0<<INT0);
 4b6:	1d ba       	out	0x1d, r1	; 29
		PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
 4b8:	10 92 68 00 	sts	0x0068, r1

		// USART initialization
		// USART disabled
		UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
 4bc:	10 92 c1 00 	sts	0x00C1, r1
		// Analog Comparator: Off
		// The Analog Comparator's positive input is
		// connected to the AIN0 pin
		// The Analog Comparator's negative input is
		// connected to the AIN1 pin
		ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
 4c0:	80 e8       	ldi	r24, 0x80	; 128
 4c2:	80 bf       	out	0x30, r24	; 48
		ADCSRB=(0<<ACME);
 4c4:	eb e7       	ldi	r30, 0x7B	; 123
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	10 82       	st	Z, r1
		// Digital input buffer on AIN0: On
		// Digital input buffer on AIN1: On
		DIDR1=(0<<AIN0D) | (0<<AIN1D);
 4ca:	10 92 7f 00 	sts	0x007F, r1
		// ADC Clock frequency: 1000.000 kHz
		// ADC Voltage Reference: AVCC pin
		// ADC Auto Trigger Source: ADC Stopped
		// Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
		// ADC4: On, ADC5: On
		DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
 4ce:	10 92 7e 00 	sts	0x007E, r1
		ADMUX=ADC_VREF_TYPE;
 4d2:	80 e4       	ldi	r24, 0x40	; 64
 4d4:	80 93 7c 00 	sts	0x007C, r24
		ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
 4d8:	84 e8       	ldi	r24, 0x84	; 132
 4da:	80 93 7a 00 	sts	0x007A, r24
		ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
 4de:	10 82       	st	Z, r1

		// SPI initialization
		// SPI disabled
		SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
 4e0:	1c bc       	out	0x2c, r1	; 44

		// TWI initialization
		// TWI disabled
		TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
 4e2:	10 92 bc 00 	sts	0x00BC, r1
    
		//===================================== LCD =====================================================//
		//************ SETARILE DE CONECTARE A LCD SUNT IN FISIERUL hd44780_setings.h *******************//
		DDRD=0xFF;	// LCD este conectat la Portul D
 4e6:	8f ef       	ldi	r24, 0xFF	; 255
 4e8:	8c 93       	st	X, r24
		//***********************************************************************************************//
		lcd_init();
 4ea:	0e 94 6f 01 	call	0x2de	; 0x2de <_Z8lcd_initv>
		lcd_puts(Date_Afisare);
	}	

inline void MeniulInitializare()
	{
		lcd_clrscr();
 4ee:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <_Z10lcd_clrscrv>
		lcd_puts("WinderMachineV.2");
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	91 e0       	ldi	r25, 0x01	; 1
 4f6:	0e 94 48 01 	call	0x290	; 0x290 <_Z8lcd_putsPKc>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 4fa:	80 e4       	ldi	r24, 0x40	; 64
 4fc:	9c e9       	ldi	r25, 0x9C	; 156
 4fe:	01 97       	sbiw	r24, 0x01	; 1
 500:	f1 f7       	brne	.-4      	; 0x4fe <main+0xd6>
	}
inline void MeniulPrincipal()
	{
		bool Eliberare_Buton=false;
		lcd_clrscr();
 502:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <_Z10lcd_clrscrv>
		Afisare(Inceputul_liniei_1, ">");
 506:	0f 2e       	mov	r0, r31
 508:	f1 e1       	ldi	r31, 0x11	; 17
 50a:	ef 2e       	mov	r14, r31
 50c:	f1 e0       	ldi	r31, 0x01	; 1
 50e:	ff 2e       	mov	r15, r31
 510:	f0 2d       	mov	r31, r0
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	b7 01       	movw	r22, r14
 518:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z7AfisareiPc>
		Afisare(Inceputul_liniei_1+2, "Start");
 51c:	82 e0       	ldi	r24, 0x02	; 2
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	63 e1       	ldi	r22, 0x13	; 19
 522:	71 e0       	ldi	r23, 0x01	; 1
 524:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z7AfisareiPc>
		Afisare(Inceputul_liniei_2+2, "Settings");
 528:	82 e4       	ldi	r24, 0x42	; 66
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	69 e1       	ldi	r22, 0x19	; 25
 52e:	71 e0       	ldi	r23, 0x01	; 1
 530:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z7AfisareiPc>
 534:	10 e0       	ldi	r17, 0x00	; 0
				do
					{
						do
							{
								Button = read_LCD_buttons();
								if(Button==btnNONE)
 536:	00 e0       	ldi	r16, 0x00	; 0
 538:	c0 e4       	ldi	r28, 0x40	; 64
 53a:	dc e9       	ldi	r29, 0x9C	; 156
	{
		bool Eliberare_Buton=false;
		lcd_clrscr();
		Afisare(Inceputul_liniei_1, ">");
		Afisare(Inceputul_liniei_1+2, "Start");
		Afisare(Inceputul_liniei_2+2, "Settings");
 53c:	dd 24       	eor	r13, r13
 53e:	d3 94       	inc	r13
						pozitia_cursor=1;
					}
				if(Button == btnUP)
					{
						Afisare(Inceputul_liniei_1, ">");
						Afisare(Inceputul_liniei_2, " ");
 540:	0f 2e       	mov	r0, r31
 542:	f2 e2       	ldi	r31, 0x22	; 34
 544:	af 2e       	mov	r10, r31
 546:	f1 e0       	ldi	r31, 0x01	; 1
 548:	bf 2e       	mov	r11, r31
 54a:	f0 2d       	mov	r31, r0
 54c:	01 c0       	rjmp	.+2      	; 0x550 <main+0x128>
	{
		bool Eliberare_Buton=false;
		lcd_clrscr();
		Afisare(Inceputul_liniei_1, ">");
		Afisare(Inceputul_liniei_1+2, "Start");
		Afisare(Inceputul_liniei_2+2, "Settings");
 54e:	1d 2d       	mov	r17, r13
			{
				do
					{
						do
							{
								Button = read_LCD_buttons();
 550:	0e 94 6d 00 	call	0xda	; 0xda <_Z16read_LCD_buttonsv>
 554:	80 93 4f 01 	sts	0x014F, r24
								if(Button==btnNONE)
 558:	85 30       	cpi	r24, 0x05	; 5
 55a:	11 f4       	brne	.+4      	; 0x560 <main+0x138>
 55c:	10 2f       	mov	r17, r16
 55e:	02 c0       	rjmp	.+4      	; 0x564 <main+0x13c>
		Afisare(Inceputul_liniei_2+2, "Settings");
		do
			{
				do
					{
						do
 560:	11 23       	and	r17, r17
 562:	b1 f7       	brne	.-20     	; 0x550 <main+0x128>
 564:	fe 01       	movw	r30, r28
 566:	31 97       	sbiw	r30, 0x01	; 1
 568:	f1 f7       	brne	.-4      	; 0x566 <main+0x13e>
		Afisare(Inceputul_liniei_1, ">");
		Afisare(Inceputul_liniei_1+2, "Start");
		Afisare(Inceputul_liniei_2+2, "Settings");
		do
			{
				do
 56a:	85 30       	cpi	r24, 0x05	; 5
 56c:	89 f3       	breq	.-30     	; 0x550 <main+0x128>

						_delay_ms(10);
					}while(Button == btnNONE);
				
				Eliberare_Buton=true;
				if(Button == btnDOWN)
 56e:	82 30       	cpi	r24, 0x02	; 2
 570:	61 f4       	brne	.+24     	; 0x58a <main+0x162>
					{
						Afisare(Inceputul_liniei_1, " ");
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	b5 01       	movw	r22, r10
 578:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z7AfisareiPc>
						Afisare(Inceputul_liniei_2, ">");
 57c:	80 e4       	ldi	r24, 0x40	; 64
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	b7 01       	movw	r22, r14
 582:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z7AfisareiPc>
						pozitia_cursor=1;
 586:	d0 92 82 01 	sts	0x0182, r13
					}
				if(Button == btnUP)
 58a:	80 91 4f 01 	lds	r24, 0x014F
 58e:	81 30       	cpi	r24, 0x01	; 1
 590:	61 f4       	brne	.+24     	; 0x5aa <main+0x182>
					{
						Afisare(Inceputul_liniei_1, ">");
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	b7 01       	movw	r22, r14
 598:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z7AfisareiPc>
						Afisare(Inceputul_liniei_2, " ");
 59c:	80 e4       	ldi	r24, 0x40	; 64
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	b5 01       	movw	r22, r10
 5a2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z7AfisareiPc>
						pozitia_cursor=0;
 5a6:	00 93 82 01 	sts	0x0182, r16
		bool Eliberare_Buton=false;
		lcd_clrscr();
		Afisare(Inceputul_liniei_1, ">");
		Afisare(Inceputul_liniei_1+2, "Start");
		Afisare(Inceputul_liniei_2+2, "Settings");
		do
 5aa:	80 91 4f 01 	lds	r24, 0x014F
 5ae:	88 23       	and	r24, r24
 5b0:	11 f0       	breq	.+4      	; 0x5b6 <main+0x18e>
 5b2:	84 30       	cpi	r24, 0x04	; 4
 5b4:	61 f6       	brne	.-104    	; 0x54e <main+0x126>
					}
			}while(Button != btnRIGHT && Button != btnSELECT);
	}
inline void MeniulSecundar()
{
	lcd_clrscr();
 5b6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <_Z10lcd_clrscrv>

	Button = btnNONE;
 5ba:	85 e0       	ldi	r24, 0x05	; 5
 5bc:	80 93 4f 01 	sts	0x014F, r24
	pozitia_cursor=0;
 5c0:	10 92 82 01 	sts	0x0182, r1
	{
		Button = read_LCD_buttons();
		if(Button == btnDOWN)
		{
			if(pozitia_cursor==0)
			pozitia_cursor++;
 5c4:	11 e0       	ldi	r17, 0x01	; 1
			Afisare(Inceputul_liniei_1, ">");
			Afisare(Inceputul_liniei_2, " ");
		}
		else
		{
			Afisare(Inceputul_liniei_1, " ");
 5c6:	0f 2e       	mov	r0, r31
 5c8:	f2 e2       	ldi	r31, 0x22	; 34
 5ca:	cf 2e       	mov	r12, r31
 5cc:	f1 e0       	ldi	r31, 0x01	; 1
 5ce:	df 2e       	mov	r13, r31
 5d0:	f0 2d       	mov	r31, r0
				Afisare(Inceputul_liniei_2+2, buffer);
				break;
			}
			case 1:
			{
				sprintf(buffer, "Lung.b=");
 5d2:	c0 e5       	ldi	r28, 0x50	; 80
 5d4:	d1 e0       	ldi	r29, 0x01	; 1
 5d6:	0f 2e       	mov	r0, r31
 5d8:	fc e2       	ldi	r31, 0x2C	; 44
 5da:	af 2e       	mov	r10, r31
 5dc:	f1 e0       	ldi	r31, 0x01	; 1
 5de:	bf 2e       	mov	r11, r31
 5e0:	f0 2d       	mov	r31, r0
 5e2:	08 e0       	ldi	r16, 0x08	; 8
				Afisare(Inceputul_liniei_1+2, buffer);
				sprintf(buffer, "Nr.spire=");
 5e4:	0f 2e       	mov	r0, r31
 5e6:	f4 e3       	ldi	r31, 0x34	; 52
 5e8:	8f 2e       	mov	r8, r31
 5ea:	f1 e0       	ldi	r31, 0x01	; 1
 5ec:	9f 2e       	mov	r9, r31
 5ee:	f0 2d       	mov	r31, r0
 5f0:	0f 2e       	mov	r0, r31
 5f2:	fa e0       	ldi	r31, 0x0A	; 10
 5f4:	7f 2e       	mov	r7, r31
 5f6:	f0 2d       	mov	r31, r0
		
		switch(imaginea)
		{
			case 0:
			{
				sprintf(buffer, "Diam.s=");
 5f8:	0f 2e       	mov	r0, r31
 5fa:	f4 e2       	ldi	r31, 0x24	; 36
 5fc:	4f 2e       	mov	r4, r31
 5fe:	f1 e0       	ldi	r31, 0x01	; 1
 600:	5f 2e       	mov	r5, r31
 602:	f0 2d       	mov	r31, r0
			}
			case 2:
			{
				sprintf(buffer, "Nr.spire=");
				Afisare(Inceputul_liniei_1+2, buffer);
				sprintf(buffer, "Coef.d=");
 604:	0f 2e       	mov	r0, r31
 606:	fe e3       	ldi	r31, 0x3E	; 62
 608:	2f 2e       	mov	r2, r31
 60a:	f1 e0       	ldi	r31, 0x01	; 1
 60c:	3f 2e       	mov	r3, r31
 60e:	f0 2d       	mov	r31, r0
			}
			case 3:
			{
				sprintf(buffer, "Coef.d=");
				Afisare(Inceputul_liniei_1+2, buffer);
				sprintf(buffer, "Bobin/s=");
 610:	0f 2e       	mov	r0, r31
 612:	f9 e0       	ldi	r31, 0x09	; 9
 614:	6f 2e       	mov	r6, r31
 616:	f0 2d       	mov	r31, r0

	Button = btnNONE;
	pozitia_cursor=0;
	do
	{
		Button = read_LCD_buttons();
 618:	0e 94 6d 00 	call	0xda	; 0xda <_Z16read_LCD_buttonsv>
 61c:	80 93 4f 01 	sts	0x014F, r24
		if(Button == btnDOWN)
 620:	82 30       	cpi	r24, 0x02	; 2
 622:	71 f4       	brne	.+28     	; 0x640 <main+0x218>
		{
			if(pozitia_cursor==0)
 624:	80 91 82 01 	lds	r24, 0x0182
 628:	88 23       	and	r24, r24
 62a:	19 f4       	brne	.+6      	; 0x632 <main+0x20a>
			pozitia_cursor++;
 62c:	10 93 82 01 	sts	0x0182, r17
 630:	07 c0       	rjmp	.+14     	; 0x640 <main+0x218>
			else
			if(imaginea<3)
 632:	80 91 83 01 	lds	r24, 0x0183
 636:	83 30       	cpi	r24, 0x03	; 3
 638:	18 f4       	brcc	.+6      	; 0x640 <main+0x218>
			imaginea++;
 63a:	8f 5f       	subi	r24, 0xFF	; 255
 63c:	80 93 83 01 	sts	0x0183, r24
		}
		if(Button == btnUP)
 640:	80 91 4f 01 	lds	r24, 0x014F
 644:	81 30       	cpi	r24, 0x01	; 1
 646:	71 f4       	brne	.+28     	; 0x664 <main+0x23c>
		{
			if(pozitia_cursor==1)
 648:	80 91 82 01 	lds	r24, 0x0182
 64c:	81 30       	cpi	r24, 0x01	; 1
 64e:	19 f4       	brne	.+6      	; 0x656 <main+0x22e>
			pozitia_cursor--;
 650:	10 92 82 01 	sts	0x0182, r1
 654:	07 c0       	rjmp	.+14     	; 0x664 <main+0x23c>
			else
			if(imaginea>0)
 656:	80 91 83 01 	lds	r24, 0x0183
 65a:	88 23       	and	r24, r24
 65c:	19 f0       	breq	.+6      	; 0x664 <main+0x23c>
			imaginea--;
 65e:	81 50       	subi	r24, 0x01	; 1
 660:	80 93 83 01 	sts	0x0183, r24
		}
		
		lcd_clrscr();
 664:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <_Z10lcd_clrscrv>
		if(pozitia_cursor==0)
 668:	80 91 82 01 	lds	r24, 0x0182
 66c:	88 23       	and	r24, r24
 66e:	59 f4       	brne	.+22     	; 0x686 <main+0x25e>
		{
			Afisare(Inceputul_liniei_1, ">");
 670:	80 e0       	ldi	r24, 0x00	; 0
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	b7 01       	movw	r22, r14
 676:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z7AfisareiPc>
			Afisare(Inceputul_liniei_2, " ");
 67a:	80 e4       	ldi	r24, 0x40	; 64
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	b6 01       	movw	r22, r12
 680:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z7AfisareiPc>
 684:	0a c0       	rjmp	.+20     	; 0x69a <main+0x272>
		}
		else
		{
			Afisare(Inceputul_liniei_1, " ");
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	b6 01       	movw	r22, r12
 68c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z7AfisareiPc>
			Afisare(Inceputul_liniei_2, ">");
 690:	80 e4       	ldi	r24, 0x40	; 64
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	b7 01       	movw	r22, r14
 696:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z7AfisareiPc>
		}
		
		switch(imaginea)
 69a:	80 91 83 01 	lds	r24, 0x0183
 69e:	81 30       	cpi	r24, 0x01	; 1
 6a0:	09 f1       	breq	.+66     	; 0x6e4 <main+0x2bc>
 6a2:	81 30       	cpi	r24, 0x01	; 1
 6a4:	30 f0       	brcs	.+12     	; 0x6b2 <main+0x28a>
 6a6:	82 30       	cpi	r24, 0x02	; 2
 6a8:	b1 f1       	breq	.+108    	; 0x716 <main+0x2ee>
 6aa:	83 30       	cpi	r24, 0x03	; 3
 6ac:	09 f0       	breq	.+2      	; 0x6b0 <main+0x288>
 6ae:	65 c0       	rjmp	.+202    	; 0x77a <main+0x352>
 6b0:	4b c0       	rjmp	.+150    	; 0x748 <main+0x320>
		{
			case 0:
			{
				sprintf(buffer, "Diam.s=");
 6b2:	de 01       	movw	r26, r28
 6b4:	f2 01       	movw	r30, r4
 6b6:	80 2f       	mov	r24, r16
 6b8:	01 90       	ld	r0, Z+
 6ba:	0d 92       	st	X+, r0
 6bc:	81 50       	subi	r24, 0x01	; 1
 6be:	e1 f7       	brne	.-8      	; 0x6b8 <main+0x290>
				Afisare(Inceputul_liniei_1+2, buffer);
 6c0:	82 e0       	ldi	r24, 0x02	; 2
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	be 01       	movw	r22, r28
 6c6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z7AfisareiPc>
				sprintf(buffer, "Lung.b=");
 6ca:	de 01       	movw	r26, r28
 6cc:	f5 01       	movw	r30, r10
 6ce:	80 2f       	mov	r24, r16
 6d0:	01 90       	ld	r0, Z+
 6d2:	0d 92       	st	X+, r0
 6d4:	81 50       	subi	r24, 0x01	; 1
 6d6:	e1 f7       	brne	.-8      	; 0x6d0 <main+0x2a8>
				Afisare(Inceputul_liniei_2+2, buffer);
 6d8:	82 e4       	ldi	r24, 0x42	; 66
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	be 01       	movw	r22, r28
 6de:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z7AfisareiPc>
 6e2:	4b c0       	rjmp	.+150    	; 0x77a <main+0x352>
				break;
			}
			case 1:
			{
				sprintf(buffer, "Lung.b=");
 6e4:	de 01       	movw	r26, r28
 6e6:	f5 01       	movw	r30, r10
 6e8:	80 2f       	mov	r24, r16
 6ea:	01 90       	ld	r0, Z+
 6ec:	0d 92       	st	X+, r0
 6ee:	81 50       	subi	r24, 0x01	; 1
 6f0:	e1 f7       	brne	.-8      	; 0x6ea <main+0x2c2>
				Afisare(Inceputul_liniei_1+2, buffer);
 6f2:	82 e0       	ldi	r24, 0x02	; 2
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	be 01       	movw	r22, r28
 6f8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z7AfisareiPc>
				sprintf(buffer, "Nr.spire=");
 6fc:	de 01       	movw	r26, r28
 6fe:	f4 01       	movw	r30, r8
 700:	87 2d       	mov	r24, r7
 702:	01 90       	ld	r0, Z+
 704:	0d 92       	st	X+, r0
 706:	81 50       	subi	r24, 0x01	; 1
 708:	e1 f7       	brne	.-8      	; 0x702 <main+0x2da>
				Afisare(Inceputul_liniei_2+2, buffer);
 70a:	82 e4       	ldi	r24, 0x42	; 66
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	be 01       	movw	r22, r28
 710:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z7AfisareiPc>
 714:	32 c0       	rjmp	.+100    	; 0x77a <main+0x352>
				break;
			}
			case 2:
			{
				sprintf(buffer, "Nr.spire=");
 716:	de 01       	movw	r26, r28
 718:	f4 01       	movw	r30, r8
 71a:	87 2d       	mov	r24, r7
 71c:	01 90       	ld	r0, Z+
 71e:	0d 92       	st	X+, r0
 720:	81 50       	subi	r24, 0x01	; 1
 722:	e1 f7       	brne	.-8      	; 0x71c <main+0x2f4>
				Afisare(Inceputul_liniei_1+2, buffer);
 724:	82 e0       	ldi	r24, 0x02	; 2
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	be 01       	movw	r22, r28
 72a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z7AfisareiPc>
				sprintf(buffer, "Coef.d=");
 72e:	de 01       	movw	r26, r28
 730:	f1 01       	movw	r30, r2
 732:	80 2f       	mov	r24, r16
 734:	01 90       	ld	r0, Z+
 736:	0d 92       	st	X+, r0
 738:	81 50       	subi	r24, 0x01	; 1
 73a:	e1 f7       	brne	.-8      	; 0x734 <main+0x30c>
				Afisare(Inceputul_liniei_2+2, buffer);
 73c:	82 e4       	ldi	r24, 0x42	; 66
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	be 01       	movw	r22, r28
 742:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z7AfisareiPc>
 746:	19 c0       	rjmp	.+50     	; 0x77a <main+0x352>
				break;
			}
			case 3:
			{
				sprintf(buffer, "Coef.d=");
 748:	de 01       	movw	r26, r28
 74a:	f1 01       	movw	r30, r2
 74c:	80 2f       	mov	r24, r16
 74e:	01 90       	ld	r0, Z+
 750:	0d 92       	st	X+, r0
 752:	81 50       	subi	r24, 0x01	; 1
 754:	e1 f7       	brne	.-8      	; 0x74e <main+0x326>
				Afisare(Inceputul_liniei_1+2, buffer);
 756:	82 e0       	ldi	r24, 0x02	; 2
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	be 01       	movw	r22, r28
 75c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z7AfisareiPc>
				sprintf(buffer, "Bobin/s=");
 760:	de 01       	movw	r26, r28
 762:	e6 e4       	ldi	r30, 0x46	; 70
 764:	f1 e0       	ldi	r31, 0x01	; 1
 766:	86 2d       	mov	r24, r6
 768:	01 90       	ld	r0, Z+
 76a:	0d 92       	st	X+, r0
 76c:	81 50       	subi	r24, 0x01	; 1
 76e:	e1 f7       	brne	.-8      	; 0x768 <main+0x340>
				Afisare(Inceputul_liniei_2+2, buffer);
 770:	82 e4       	ldi	r24, 0x42	; 66
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	be 01       	movw	r22, r28
 776:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z7AfisareiPc>
				break;
			}
		}
		do
		{
			Button = read_LCD_buttons();
 77a:	0e 94 6d 00 	call	0xda	; 0xda <_Z16read_LCD_buttonsv>
 77e:	80 93 4f 01 	sts	0x014F, r24
 782:	e0 ea       	ldi	r30, 0xA0	; 160
 784:	ff e0       	ldi	r31, 0x0F	; 15
 786:	31 97       	sbiw	r30, 0x01	; 1
 788:	f1 f7       	brne	.-4      	; 0x786 <main+0x35e>
				sprintf(buffer, "Bobin/s=");
				Afisare(Inceputul_liniei_2+2, buffer);
				break;
			}
		}
		do
 78a:	85 30       	cpi	r24, 0x05	; 5
 78c:	b1 f7       	brne	.-20     	; 0x77a <main+0x352>
 78e:	44 cf       	rjmp	.-376    	; 0x618 <main+0x1f0>

00000790 <_exit>:
 790:	f8 94       	cli

00000792 <__stop_program>:
 792:	ff cf       	rjmp	.-2      	; 0x792 <__stop_program>
