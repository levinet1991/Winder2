
Winder2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000c32  00000cc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000032  00800114  00800114  00000cda  2**0
                  ALLOC
  3 .debug_aranges 00000078  00000000  00000000  00000cda  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000b7  00000000  00000000  00000d52  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000575  00000000  00000000  00000e09  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000232  00000000  00000000  0000137e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007f2  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001da4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000029e  00000000  00000000  00001e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015c  00000000  00000000  00002112  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  0000226e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
/*************************************************************************
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e3       	ldi	r30, 0x32	; 50
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 34       	cpi	r26, 0x46	; 70
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 05 02 	call	0x40a	; 0x40a <main>
  9e:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z8read_adch>:
char buffer [50];	
	
// Read the AD conversion result
unsigned int read_adc(unsigned char adc_input)
	{
		ADMUX=adc_input | ADC_VREF_TYPE;
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
  ac:	85 e3       	ldi	r24, 0x35	; 53
  ae:	8a 95       	dec	r24
  b0:	f1 f7       	brne	.-4      	; 0xae <_Z8read_adch+0x8>
		// Delay needed for the stabilization of the ADC input voltage
		_delay_us(10);
		// Start the AD conversion
		ADCSRA|=(1<<ADSC);
  b2:	ea e7       	ldi	r30, 0x7A	; 122
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	80 83       	st	Z, r24
		// Wait for the AD conversion to complete
		while ((ADCSRA & (1<<ADIF))==0);
  bc:	80 81       	ld	r24, Z
  be:	84 ff       	sbrs	r24, 4
  c0:	fd cf       	rjmp	.-6      	; 0xbc <_Z8read_adch+0x16>
		ADCSRA|=(1<<ADIF);
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 61       	ori	r24, 0x10	; 16
  ca:	80 83       	st	Z, r24
		return ADCW;
  cc:	20 91 78 00 	lds	r18, 0x0078
  d0:	30 91 79 00 	lds	r19, 0x0079
	}
  d4:	82 2f       	mov	r24, r18
  d6:	93 2f       	mov	r25, r19
  d8:	08 95       	ret

000000da <_Z16read_LCD_buttonsv>:

// read the buttons
int read_LCD_buttons()
	{
		int adc_key_in  = 0;
		adc_key_in = read_adc(0);      // read the value from the sensor 
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z8read_adch>
		// my buttons when read are centered at these valies: 0, 144, 329, 504, 741
		// we add approx 50 to those values and check to see if we are close
		if (adc_key_in > 1000) return btnNONE; // We make this the 1st option for speed reasons since it will be the most likely result
  e0:	23 e0       	ldi	r18, 0x03	; 3
  e2:	89 3e       	cpi	r24, 0xE9	; 233
  e4:	92 07       	cpc	r25, r18
  e6:	04 f5       	brge	.+64     	; 0x128 <_Z16read_LCD_buttonsv+0x4e>
		// For V1.1 us this threshold
		if (adc_key_in < 50)   return btnRIGHT;  
  e8:	82 33       	cpi	r24, 0x32	; 50
  ea:	91 05       	cpc	r25, r1
  ec:	1c f4       	brge	.+6      	; 0xf4 <_Z16read_LCD_buttonsv+0x1a>
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	1c c0       	rjmp	.+56     	; 0x12c <_Z16read_LCD_buttonsv+0x52>
		if (adc_key_in < 250)  return btnUP; 
  f4:	8a 3f       	cpi	r24, 0xFA	; 250
  f6:	91 05       	cpc	r25, r1
  f8:	1c f4       	brge	.+6      	; 0x100 <_Z16read_LCD_buttonsv+0x26>
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	16 c0       	rjmp	.+44     	; 0x12c <_Z16read_LCD_buttonsv+0x52>
		if (adc_key_in < 450)  return btnDOWN; 
 100:	21 e0       	ldi	r18, 0x01	; 1
 102:	82 3c       	cpi	r24, 0xC2	; 194
 104:	92 07       	cpc	r25, r18
 106:	1c f4       	brge	.+6      	; 0x10e <_Z16read_LCD_buttonsv+0x34>
 108:	22 e0       	ldi	r18, 0x02	; 2
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	0f c0       	rjmp	.+30     	; 0x12c <_Z16read_LCD_buttonsv+0x52>
		if (adc_key_in < 650)  return btnLEFT; 
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	8a 38       	cpi	r24, 0x8A	; 138
 112:	92 07       	cpc	r25, r18
 114:	1c f4       	brge	.+6      	; 0x11c <_Z16read_LCD_buttonsv+0x42>
 116:	23 e0       	ldi	r18, 0x03	; 3
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	08 c0       	rjmp	.+16     	; 0x12c <_Z16read_LCD_buttonsv+0x52>
		if (adc_key_in < 850)  return btnSELECT;  
 11c:	82 55       	subi	r24, 0x52	; 82
 11e:	93 40       	sbci	r25, 0x03	; 3
 120:	1c f4       	brge	.+6      	; 0x128 <_Z16read_LCD_buttonsv+0x4e>
 122:	24 e0       	ldi	r18, 0x04	; 4
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <_Z16read_LCD_buttonsv+0x52>
 128:	25 e0       	ldi	r18, 0x05	; 5
 12a:	30 e0       	ldi	r19, 0x00	; 0

		return btnNONE;  // when all others fail, return this...
	}
 12c:	82 2f       	mov	r24, r18
 12e:	93 2f       	mov	r25, r19
 130:	08 95       	ret

00000132 <_ZL9lcd_writehh>:
Input:    data   byte to write to LCD
          rs     1: write data
                 0: write instruction
Returns:  none
*************************************************************************/
static void lcd_write(uint8_t data,uint8_t rs)
 132:	28 2f       	mov	r18, r24
          Delay_us(5);
          PrevCmdInvolvedAddressCounter=0;
        }
    #endif

    if (rs)
 134:	66 23       	and	r22, r22
 136:	31 f0       	breq	.+12     	; 0x144 <_ZL9lcd_writehh+0x12>
      {
        lcd_rs_port_high();                            // RS=1: Write Character
 138:	eb e2       	ldi	r30, 0x2B	; 43
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	81 60       	ori	r24, 0x01	; 1
 140:	80 83       	st	Z, r24
 142:	05 c0       	rjmp	.+10     	; 0x14e <_ZL9lcd_writehh+0x1c>
        PrevCmdInvolvedAddressCounter=1;
        #endif
      }
    else
      {
        lcd_rs_port_low();                          // RS=0: Write Command
 144:	eb e2       	ldi	r30, 0x2B	; 43
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	8e 7f       	andi	r24, 0xFE	; 254
 14c:	80 83       	st	Z, r24
        PrevCmdInvolvedAddressCounter=0;
        #endif
      }

    #if LCD_BITS==4
      lcd_db7_port_set(data&_BV(7));                  //Output High Nibble
 14e:	22 23       	and	r18, r18
 150:	34 f4       	brge	.+12     	; 0x15e <_ZL9lcd_writehh+0x2c>
 152:	eb e2       	ldi	r30, 0x2B	; 43
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	80 68       	ori	r24, 0x80	; 128
 15a:	80 83       	st	Z, r24
 15c:	05 c0       	rjmp	.+10     	; 0x168 <_ZL9lcd_writehh+0x36>
 15e:	eb e2       	ldi	r30, 0x2B	; 43
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	8f 77       	andi	r24, 0x7F	; 127
 166:	80 83       	st	Z, r24
      lcd_db6_port_set(data&_BV(6));
 168:	92 2f       	mov	r25, r18
 16a:	26 ff       	sbrs	r18, 6
 16c:	06 c0       	rjmp	.+12     	; 0x17a <_ZL9lcd_writehh+0x48>
 16e:	eb e2       	ldi	r30, 0x2B	; 43
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	80 64       	ori	r24, 0x40	; 64
 176:	80 83       	st	Z, r24
 178:	05 c0       	rjmp	.+10     	; 0x184 <_ZL9lcd_writehh+0x52>
 17a:	eb e2       	ldi	r30, 0x2B	; 43
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	8f 7b       	andi	r24, 0xBF	; 191
 182:	80 83       	st	Z, r24
      lcd_db5_port_set(data&_BV(5));
 184:	95 ff       	sbrs	r25, 5
 186:	06 c0       	rjmp	.+12     	; 0x194 <_ZL9lcd_writehh+0x62>
 188:	eb e2       	ldi	r30, 0x2B	; 43
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	80 62       	ori	r24, 0x20	; 32
 190:	80 83       	st	Z, r24
 192:	05 c0       	rjmp	.+10     	; 0x19e <_ZL9lcd_writehh+0x6c>
 194:	eb e2       	ldi	r30, 0x2B	; 43
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	8f 7d       	andi	r24, 0xDF	; 223
 19c:	80 83       	st	Z, r24
      lcd_db4_port_set(data&_BV(4));
 19e:	94 ff       	sbrs	r25, 4
 1a0:	06 c0       	rjmp	.+12     	; 0x1ae <_ZL9lcd_writehh+0x7c>
 1a2:	eb e2       	ldi	r30, 0x2B	; 43
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	80 61       	ori	r24, 0x10	; 16
 1aa:	80 83       	st	Z, r24
 1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <_ZL9lcd_writehh+0x86>
 1ae:	eb e2       	ldi	r30, 0x2B	; 43
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	8f 7e       	andi	r24, 0xEF	; 239
 1b6:	80 83       	st	Z, r24

      Delay_ns(100);
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <_ZL9lcd_writehh+0x88>
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 1ba:	eb e2       	ldi	r30, 0x2B	; 43
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	84 60       	ori	r24, 0x04	; 4
 1c2:	80 83       	st	Z, r24
      lcd_db4_port_set(data&_BV(4));

      Delay_ns(100);
      lcd_e_port_high();

      Delay_ns(500);
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <_ZL9lcd_writehh+0x94>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <_ZL9lcd_writehh+0x9a>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 1cc:	80 81       	ld	r24, Z
 1ce:	8b 7f       	andi	r24, 0xFB	; 251
 1d0:	80 83       	st	Z, r24
      lcd_e_port_high();

      Delay_ns(500);
      lcd_e_port_low();

      lcd_db7_port_set(data&_BV(3));                  //Output High Nibble
 1d2:	93 ff       	sbrs	r25, 3
 1d4:	04 c0       	rjmp	.+8      	; 0x1de <_ZL9lcd_writehh+0xac>
 1d6:	80 81       	ld	r24, Z
 1d8:	80 68       	ori	r24, 0x80	; 128
 1da:	80 83       	st	Z, r24
 1dc:	05 c0       	rjmp	.+10     	; 0x1e8 <_ZL9lcd_writehh+0xb6>
 1de:	eb e2       	ldi	r30, 0x2B	; 43
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	8f 77       	andi	r24, 0x7F	; 127
 1e6:	80 83       	st	Z, r24
      lcd_db6_port_set(data&_BV(2));
 1e8:	92 ff       	sbrs	r25, 2
 1ea:	06 c0       	rjmp	.+12     	; 0x1f8 <_ZL9lcd_writehh+0xc6>
 1ec:	eb e2       	ldi	r30, 0x2B	; 43
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	80 64       	ori	r24, 0x40	; 64
 1f4:	80 83       	st	Z, r24
 1f6:	05 c0       	rjmp	.+10     	; 0x202 <_ZL9lcd_writehh+0xd0>
 1f8:	eb e2       	ldi	r30, 0x2B	; 43
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	8f 7b       	andi	r24, 0xBF	; 191
 200:	80 83       	st	Z, r24
      lcd_db5_port_set(data&_BV(1));
 202:	91 ff       	sbrs	r25, 1
 204:	06 c0       	rjmp	.+12     	; 0x212 <_ZL9lcd_writehh+0xe0>
 206:	eb e2       	ldi	r30, 0x2B	; 43
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	80 62       	ori	r24, 0x20	; 32
 20e:	80 83       	st	Z, r24
 210:	05 c0       	rjmp	.+10     	; 0x21c <_ZL9lcd_writehh+0xea>
 212:	eb e2       	ldi	r30, 0x2B	; 43
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	8f 7d       	andi	r24, 0xDF	; 223
 21a:	80 83       	st	Z, r24
      lcd_db4_port_set(data&_BV(0));
 21c:	90 ff       	sbrs	r25, 0
 21e:	06 c0       	rjmp	.+12     	; 0x22c <_ZL9lcd_writehh+0xfa>
 220:	eb e2       	ldi	r30, 0x2B	; 43
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	80 61       	ori	r24, 0x10	; 16
 228:	80 83       	st	Z, r24
 22a:	05 c0       	rjmp	.+10     	; 0x236 <_ZL9lcd_writehh+0x104>
 22c:	eb e2       	ldi	r30, 0x2B	; 43
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	8f 7e       	andi	r24, 0xEF	; 239
 234:	80 83       	st	Z, r24

      Delay_ns(100);
 236:	00 c0       	rjmp	.+0      	; 0x238 <_ZL9lcd_writehh+0x106>
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 238:	eb e2       	ldi	r30, 0x2B	; 43
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	84 60       	ori	r24, 0x04	; 4
 240:	80 83       	st	Z, r24
      lcd_db4_port_set(data&_BV(0));

      Delay_ns(100);
      lcd_e_port_high();

      Delay_ns(500);
 242:	92 e0       	ldi	r25, 0x02	; 2
 244:	9a 95       	dec	r25
 246:	f1 f7       	brne	.-4      	; 0x244 <_ZL9lcd_writehh+0x112>
 248:	00 c0       	rjmp	.+0      	; 0x24a <_ZL9lcd_writehh+0x118>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 24a:	80 81       	ld	r24, Z
 24c:	8b 7f       	andi	r24, 0xFB	; 251
 24e:	80 83       	st	Z, r24
      lcd_e_port_high();

      Delay_ns(500);
      lcd_e_port_low();

      lcd_db7_port_high();                            // All Data Pins High (Inactive)
 250:	80 81       	ld	r24, Z
 252:	80 68       	ori	r24, 0x80	; 128
 254:	80 83       	st	Z, r24
      lcd_db6_port_high();
 256:	80 81       	ld	r24, Z
 258:	80 64       	ori	r24, 0x40	; 64
 25a:	80 83       	st	Z, r24
      lcd_db5_port_high();
 25c:	80 81       	ld	r24, Z
 25e:	80 62       	ori	r24, 0x20	; 32
 260:	80 83       	st	Z, r24
      lcd_db4_port_high();
 262:	80 81       	ld	r24, Z
 264:	80 61       	ori	r24, 0x10	; 16
 266:	80 83       	st	Z, r24
      lcd_db1_port_high();
      lcd_db0_port_high();
    #endif

    #if (WAIT_MODE==0 || RW_LINE_IMPLEMENTED==0)
      if (!rs && data<=((1<<LCD_CLR) | (1<<LCD_HOME))) // Is command clrscr or home?
 268:	66 23       	and	r22, r22
 26a:	49 f4       	brne	.+18     	; 0x27e <_ZL9lcd_writehh+0x14c>
 26c:	24 30       	cpi	r18, 0x04	; 4
 26e:	38 f4       	brcc	.+14     	; 0x27e <_ZL9lcd_writehh+0x14c>
        Delay_us(1640);
 270:	8f e9       	ldi	r24, 0x9F	; 159
 272:	99 e1       	ldi	r25, 0x19	; 25
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <_ZL9lcd_writehh+0x142>
 278:	00 c0       	rjmp	.+0      	; 0x27a <_ZL9lcd_writehh+0x148>
 27a:	00 00       	nop
 27c:	08 95       	ret
      else Delay_us(40);
 27e:	95 ed       	ldi	r25, 0xD5	; 213
 280:	9a 95       	dec	r25
 282:	f1 f7       	brne	.-4      	; 0x280 <_ZL9lcd_writehh+0x14e>
 284:	00 00       	nop
 286:	08 95       	ret

00000288 <_Z8lcd_putcc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/
void lcd_putc(char c)
  {
    lcd_write(c,1);
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	0e 94 99 00 	call	0x132	; 0x132 <_ZL9lcd_writehh>
  }
 28e:	08 95       	ret

00000290 <_Z8lcd_putsPKc>:
/*************************************************************************
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	fc 01       	movw	r30, r24
  {
    register char c;

    while ((c=*s++)) 
 296:	80 81       	ld	r24, Z
 298:	88 23       	and	r24, r24
 29a:	39 f0       	breq	.+14     	; 0x2aa <_Z8lcd_putsPKc+0x1a>
 29c:	ef 01       	movw	r28, r30
      lcd_putc(c);
 29e:	0e 94 44 01 	call	0x288	; 0x288 <_Z8lcd_putcc>
*************************************************************************/
void lcd_puts(const char *s)
  {
    register char c;

    while ((c=*s++)) 
 2a2:	89 81       	ldd	r24, Y+1	; 0x01
 2a4:	21 96       	adiw	r28, 0x01	; 1
 2a6:	88 23       	and	r24, r24
 2a8:	d1 f7       	brne	.-12     	; 0x29e <_Z8lcd_putsPKc+0xe>
      lcd_putc(c);
  }
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <_Z11lcd_commandh>:
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
  {
    lcd_write(cmd,0);
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	0e 94 99 00 	call	0x132	; 0x132 <_ZL9lcd_writehh>
  }
 2b6:	08 95       	ret

000002b8 <_Z10lcd_clrscrv>:
Input:    none
Returns:  none
*************************************************************************/
void lcd_clrscr()
  {
    lcd_command(1<<LCD_CLR);
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 58 01 	call	0x2b0	; 0x2b0 <_Z11lcd_commandh>
  }
 2be:	08 95       	ret

000002c0 <_Z8lcd_initv>:
      case 4 : DDR(LCD_E4_PORT)|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                DDR(LCD_E_PORT)|=_BV(LCD_E_PIN);
 2c0:	ea e2       	ldi	r30, 0x2A	; 42
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	84 60       	ori	r24, 0x04	; 4
 2c8:	80 83       	st	Z, r24
*************************************************************************/
void lcd_init()
  {
    //Set All Pins as Output
    lcd_e_ddr_high();
    lcd_rs_ddr_high();
 2ca:	80 81       	ld	r24, Z
 2cc:	81 60       	ori	r24, 0x01	; 1
 2ce:	80 83       	st	Z, r24
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_ddr_high();
    #endif
    lcd_db7_ddr_high();
 2d0:	80 81       	ld	r24, Z
 2d2:	80 68       	ori	r24, 0x80	; 128
 2d4:	80 83       	st	Z, r24
    lcd_db6_ddr_high();
 2d6:	80 81       	ld	r24, Z
 2d8:	80 64       	ori	r24, 0x40	; 64
 2da:	80 83       	st	Z, r24
    lcd_db5_ddr_high();
 2dc:	80 81       	ld	r24, Z
 2de:	80 62       	ori	r24, 0x20	; 32
 2e0:	80 83       	st	Z, r24
    lcd_db4_ddr_high();
 2e2:	80 81       	ld	r24, Z
 2e4:	80 61       	ori	r24, 0x10	; 16
 2e6:	80 83       	st	Z, r24
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 2e8:	eb e2       	ldi	r30, 0x2B	; 43
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	8b 7f       	andi	r24, 0xFB	; 251
 2f0:	80 83       	st	Z, r24
      lcd_db0_ddr_high();
    #endif

    //Set All Control Lines Low
    lcd_e_port_low();
    lcd_rs_port_low();
 2f2:	80 81       	ld	r24, Z
 2f4:	8e 7f       	andi	r24, 0xFE	; 254
 2f6:	80 83       	st	Z, r24
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_port_low();
    #endif

    //Set All Data Lines High
    lcd_db7_port_high();
 2f8:	80 81       	ld	r24, Z
 2fa:	80 68       	ori	r24, 0x80	; 128
 2fc:	80 83       	st	Z, r24
    lcd_db6_port_high();
 2fe:	80 81       	ld	r24, Z
 300:	80 64       	ori	r24, 0x40	; 64
 302:	80 83       	st	Z, r24
    lcd_db5_port_high();
 304:	80 81       	ld	r24, Z
 306:	80 62       	ori	r24, 0x20	; 32
 308:	80 83       	st	Z, r24
    lcd_db4_port_high();
 30a:	80 81       	ld	r24, Z
 30c:	80 61       	ori	r24, 0x10	; 16
 30e:	80 83       	st	Z, r24
      lcd_db1_port_high();
      lcd_db0_port_high();
    #endif

    //Startup Delay
    Delay_ms(DELAY_RESET);
 310:	8f e5       	ldi	r24, 0x5F	; 95
 312:	9a ee       	ldi	r25, 0xEA	; 234
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <_Z8lcd_initv+0x54>
 318:	00 c0       	rjmp	.+0      	; 0x31a <_Z8lcd_initv+0x5a>
 31a:	00 00       	nop

    //Initialize Display
    lcd_db7_port_low();
 31c:	80 81       	ld	r24, Z
 31e:	8f 77       	andi	r24, 0x7F	; 127
 320:	80 83       	st	Z, r24
    lcd_db6_port_low();
 322:	80 81       	ld	r24, Z
 324:	8f 7b       	andi	r24, 0xBF	; 191
 326:	80 83       	st	Z, r24
    Delay_ns(100);
 328:	00 c0       	rjmp	.+0      	; 0x32a <_Z8lcd_initv+0x6a>
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 32a:	80 81       	ld	r24, Z
 32c:	84 60       	ori	r24, 0x04	; 4
 32e:	80 83       	st	Z, r24
    //Initialize Display
    lcd_db7_port_low();
    lcd_db6_port_low();
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
 330:	92 e0       	ldi	r25, 0x02	; 2
 332:	9a 95       	dec	r25
 334:	f1 f7       	brne	.-4      	; 0x332 <_Z8lcd_initv+0x72>
 336:	00 c0       	rjmp	.+0      	; 0x338 <_Z8lcd_initv+0x78>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 338:	80 81       	ld	r24, Z
 33a:	8b 7f       	andi	r24, 0xFB	; 251
 33c:	80 83       	st	Z, r24
    Delay_ns(100);
    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();

    Delay_us(4100);
 33e:	8f e0       	ldi	r24, 0x0F	; 15
 340:	90 e4       	ldi	r25, 0x40	; 64
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <_Z8lcd_initv+0x82>
 346:	00 c0       	rjmp	.+0      	; 0x348 <_Z8lcd_initv+0x88>
 348:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 34a:	80 81       	ld	r24, Z
 34c:	84 60       	ori	r24, 0x04	; 4
 34e:	80 83       	st	Z, r24
    lcd_e_port_low();

    Delay_us(4100);

    lcd_e_port_high();
    Delay_ns(500);
 350:	92 e0       	ldi	r25, 0x02	; 2
 352:	9a 95       	dec	r25
 354:	f1 f7       	brne	.-4      	; 0x352 <_Z8lcd_initv+0x92>
 356:	00 c0       	rjmp	.+0      	; 0x358 <_Z8lcd_initv+0x98>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 358:	80 81       	ld	r24, Z
 35a:	8b 7f       	andi	r24, 0xFB	; 251
 35c:	80 83       	st	Z, r24

    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();

    Delay_us(100);
 35e:	8f e8       	ldi	r24, 0x8F	; 143
 360:	91 e0       	ldi	r25, 0x01	; 1
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <_Z8lcd_initv+0xa2>
 366:	00 c0       	rjmp	.+0      	; 0x368 <_Z8lcd_initv+0xa8>
 368:	00 00       	nop
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 36a:	80 81       	ld	r24, Z
 36c:	84 60       	ori	r24, 0x04	; 4
 36e:	80 83       	st	Z, r24
    lcd_e_port_low();

    Delay_us(100);

    lcd_e_port_high();
    Delay_ns(500);
 370:	92 e0       	ldi	r25, 0x02	; 2
 372:	9a 95       	dec	r25
 374:	f1 f7       	brne	.-4      	; 0x372 <_Z8lcd_initv+0xb2>
 376:	00 c0       	rjmp	.+0      	; 0x378 <_Z8lcd_initv+0xb8>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 378:	80 81       	ld	r24, Z
 37a:	8b 7f       	andi	r24, 0xFB	; 251
 37c:	80 83       	st	Z, r24

    lcd_e_port_high();
    Delay_ns(500);
    lcd_e_port_low();

    Delay_us(40);
 37e:	85 ed       	ldi	r24, 0xD5	; 213
 380:	8a 95       	dec	r24
 382:	f1 f7       	brne	.-4      	; 0x380 <_Z8lcd_initv+0xc0>
 384:	00 00       	nop

    //Init differs between 4-bit and 8-bit from here
    #if (LCD_BITS==4)
      lcd_db4_port_low();
 386:	80 81       	ld	r24, Z
 388:	8f 7e       	andi	r24, 0xEF	; 239
 38a:	80 83       	st	Z, r24
      Delay_ns(100);
 38c:	00 c0       	rjmp	.+0      	; 0x38e <_Z8lcd_initv+0xce>
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 38e:	80 81       	ld	r24, Z
 390:	84 60       	ori	r24, 0x04	; 4
 392:	80 83       	st	Z, r24
    //Init differs between 4-bit and 8-bit from here
    #if (LCD_BITS==4)
      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
 394:	92 e0       	ldi	r25, 0x02	; 2
 396:	9a 95       	dec	r25
 398:	f1 f7       	brne	.-4      	; 0x396 <_Z8lcd_initv+0xd6>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <_Z8lcd_initv+0xdc>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 39c:	80 81       	ld	r24, Z
 39e:	8b 7f       	andi	r24, 0xFB	; 251
 3a0:	80 83       	st	Z, r24
      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
      lcd_e_port_low();
      Delay_us(40);
 3a2:	85 ed       	ldi	r24, 0xD5	; 213
 3a4:	8a 95       	dec	r24
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <_Z8lcd_initv+0xe4>
 3a8:	00 00       	nop

      lcd_db4_port_low();
 3aa:	80 81       	ld	r24, Z
 3ac:	8f 7e       	andi	r24, 0xEF	; 239
 3ae:	80 83       	st	Z, r24
      Delay_ns(100);
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <_Z8lcd_initv+0xf2>
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 3b2:	80 81       	ld	r24, Z
 3b4:	84 60       	ori	r24, 0x04	; 4
 3b6:	80 83       	st	Z, r24
      Delay_us(40);

      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
 3b8:	92 e0       	ldi	r25, 0x02	; 2
 3ba:	9a 95       	dec	r25
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <_Z8lcd_initv+0xfa>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <_Z8lcd_initv+0x100>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 3c0:	80 81       	ld	r24, Z
 3c2:	8b 7f       	andi	r24, 0xFB	; 251
 3c4:	80 83       	st	Z, r24
      lcd_db4_port_low();
      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
      lcd_e_port_low();
      Delay_ns(500);
 3c6:	82 e0       	ldi	r24, 0x02	; 2
 3c8:	8a 95       	dec	r24
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <_Z8lcd_initv+0x108>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <_Z8lcd_initv+0x10e>

      #if (LCD_DISPLAYS==1)
        if (LCD_DISPLAY_LINES>1)
          lcd_db7_port_high();
 3ce:	80 81       	ld	r24, Z
 3d0:	80 68       	ori	r24, 0x80	; 128
 3d2:	80 83       	st	Z, r24
          }
        if (c>1)
          lcd_db7_port_high();
      #endif

      Delay_ns(100);
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <_Z8lcd_initv+0x116>
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 3d6:	80 81       	ld	r24, Z
 3d8:	84 60       	ori	r24, 0x04	; 4
 3da:	80 83       	st	Z, r24
          lcd_db7_port_high();
      #endif

      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
 3dc:	92 e0       	ldi	r25, 0x02	; 2
 3de:	9a 95       	dec	r25
 3e0:	f1 f7       	brne	.-4      	; 0x3de <_Z8lcd_initv+0x11e>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <_Z8lcd_initv+0x124>
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 3e4:	80 81       	ld	r24, Z
 3e6:	8b 7f       	andi	r24, 0xFB	; 251
 3e8:	80 83       	st	Z, r24

      Delay_ns(100);
      lcd_e_port_high();
      Delay_ns(500);
      lcd_e_port_low();
      Delay_us(40);
 3ea:	85 ed       	ldi	r24, 0xD5	; 213
 3ec:	8a 95       	dec	r24
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <_Z8lcd_initv+0x12c>
 3f0:	00 00       	nop
      lcd_e_port_low();
      Delay_us(40);
    #endif

    //Display Off
    lcd_command(_BV(LCD_DISPLAYMODE));
 3f2:	88 e0       	ldi	r24, 0x08	; 8
 3f4:	0e 94 58 01 	call	0x2b0	; 0x2b0 <_Z11lcd_commandh>

    //Display Clear
    lcd_clrscr();
 3f8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <_Z10lcd_clrscrv>

    //Entry Mode Set
    lcd_command(_BV(LCD_ENTRY_MODE) | _BV(LCD_ENTRY_INC));
 3fc:	86 e0       	ldi	r24, 0x06	; 6
 3fe:	0e 94 58 01 	call	0x2b0	; 0x2b0 <_Z11lcd_commandh>

    //Display On
    lcd_command(_BV(LCD_DISPLAYMODE) | _BV(LCD_DISPLAYMODE_ON));
 402:	8c e0       	ldi	r24, 0x0C	; 12
 404:	0e 94 58 01 	call	0x2b0	; 0x2b0 <_Z11lcd_commandh>
  }
 408:	08 95       	ret

0000040a <main>:
	
int main(void)
 40a:	4f 92       	push	r4
 40c:	5f 92       	push	r5
 40e:	6f 92       	push	r6
 410:	7f 92       	push	r7
 412:	8f 92       	push	r8
 414:	9f 92       	push	r9
 416:	af 92       	push	r10
 418:	bf 92       	push	r11
 41a:	cf 92       	push	r12
 41c:	df 92       	push	r13
 41e:	ef 92       	push	r14
 420:	ff 92       	push	r15
 422:	0f 93       	push	r16
 424:	1f 93       	push	r17
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
	{
		// Input/Output Ports initialization
		// Port B initialization
		// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
		DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
 42a:	14 b8       	out	0x04, r1	; 4
		// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
		PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
 42c:	15 b8       	out	0x05, r1	; 5

		// Port C initialization
		// Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
		DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
 42e:	17 b8       	out	0x07, r1	; 7
		// State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
		PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
 430:	18 b8       	out	0x08, r1	; 8

		// Port D initialization
		// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
		DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
 432:	aa e2       	ldi	r26, 0x2A	; 42
 434:	b0 e0       	ldi	r27, 0x00	; 0
 436:	1c 92       	st	X, r1
		// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
		PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
 438:	1b b8       	out	0x0b, r1	; 11
		// Clock source: System Clock
		// Clock value: Timer 0 Stopped
		// Mode: Normal top=0xFF
		// OC0A output: Disconnected
		// OC0B output: Disconnected
		TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
 43a:	14 bc       	out	0x24, r1	; 36
		TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
 43c:	15 bc       	out	0x25, r1	; 37
		TCNT0=0x00;
 43e:	16 bc       	out	0x26, r1	; 38
		OCR0A=0x00;
 440:	17 bc       	out	0x27, r1	; 39
		OCR0B=0x00;
 442:	18 bc       	out	0x28, r1	; 40
		// Input Capture on Falling Edge
		// Timer1 Overflow Interrupt: Off
		// Input Capture Interrupt: Off
		// Compare A Match Interrupt: Off
		// Compare B Match Interrupt: Off
		TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
 444:	10 92 80 00 	sts	0x0080, r1
		TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
 448:	10 92 81 00 	sts	0x0081, r1
		TCNT1H=0x00;
 44c:	10 92 85 00 	sts	0x0085, r1
		TCNT1L=0x00;
 450:	10 92 84 00 	sts	0x0084, r1
		ICR1H=0x00;
 454:	10 92 87 00 	sts	0x0087, r1
		ICR1L=0x00;
 458:	10 92 86 00 	sts	0x0086, r1
		OCR1AH=0x00;
 45c:	10 92 89 00 	sts	0x0089, r1
		OCR1AL=0x00;
 460:	10 92 88 00 	sts	0x0088, r1
		OCR1BH=0x00;
 464:	10 92 8b 00 	sts	0x008B, r1
		OCR1BL=0x00;
 468:	10 92 8a 00 	sts	0x008A, r1
		// Clock source: System Clock
		// Clock value: Timer2 Stopped
		// Mode: Normal top=0xFF
		// OC2A output: Disconnected
		// OC2B output: Disconnected
		ASSR=(0<<EXCLK) | (0<<AS2);
 46c:	10 92 b6 00 	sts	0x00B6, r1
		TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
 470:	10 92 b0 00 	sts	0x00B0, r1
		TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
 474:	10 92 b1 00 	sts	0x00B1, r1
		TCNT2=0x00;
 478:	10 92 b2 00 	sts	0x00B2, r1
		OCR2A=0x00;
 47c:	10 92 b3 00 	sts	0x00B3, r1
		OCR2B=0x00;
 480:	10 92 b4 00 	sts	0x00B4, r1

		// Timer/Counter 0 Interrupt(s) initialization
		TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
 484:	10 92 6e 00 	sts	0x006E, r1

		// Timer/Counter 1 Interrupt(s) initialization
		TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
 488:	10 92 6f 00 	sts	0x006F, r1

		// Timer/Counter 2 Interrupt(s) initialization
		TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
 48c:	10 92 70 00 	sts	0x0070, r1
		// INT0: Off
		// INT1: Off
		// Interrupt on any change on pins PCINT0-7: Off
		// Interrupt on any change on pins PCINT8-14: Off
		// Interrupt on any change on pins PCINT16-23: Off
		EICRA=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
 490:	10 92 69 00 	sts	0x0069, r1
		EIMSK=(0<<INT1) | (0<<INT0);
 494:	1d ba       	out	0x1d, r1	; 29
		PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
 496:	10 92 68 00 	sts	0x0068, r1

		// USART initialization
		// USART disabled
		UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
 49a:	10 92 c1 00 	sts	0x00C1, r1
		// Analog Comparator: Off
		// The Analog Comparator's positive input is
		// connected to the AIN0 pin
		// The Analog Comparator's negative input is
		// connected to the AIN1 pin
		ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
 49e:	80 e8       	ldi	r24, 0x80	; 128
 4a0:	80 bf       	out	0x30, r24	; 48
		ADCSRB=(0<<ACME);
 4a2:	eb e7       	ldi	r30, 0x7B	; 123
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	10 82       	st	Z, r1
		// Digital input buffer on AIN0: On
		// Digital input buffer on AIN1: On
		DIDR1=(0<<AIN0D) | (0<<AIN1D);
 4a8:	10 92 7f 00 	sts	0x007F, r1
		// ADC Clock frequency: 1000.000 kHz
		// ADC Voltage Reference: AVCC pin
		// ADC Auto Trigger Source: ADC Stopped
		// Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
		// ADC4: On, ADC5: On
		DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
 4ac:	10 92 7e 00 	sts	0x007E, r1
		ADMUX=ADC_VREF_TYPE;
 4b0:	80 e4       	ldi	r24, 0x40	; 64
 4b2:	80 93 7c 00 	sts	0x007C, r24
		ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
 4b6:	84 e8       	ldi	r24, 0x84	; 132
 4b8:	80 93 7a 00 	sts	0x007A, r24
		ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
 4bc:	10 82       	st	Z, r1

		// SPI initialization
		// SPI disabled
		SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
 4be:	1c bc       	out	0x2c, r1	; 44

		// TWI initialization
		// TWI disabled
		TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
 4c0:	10 92 bc 00 	sts	0x00BC, r1
    
		//===================================== LCD =====================================================//
		//************ SETARILE DE CONECTARE A LCD SUNT IN FISIERUL hd44780_setings.h *******************//
		DDRD=0xFF;	// LCD este conectat la Portul D
 4c4:	8f ef       	ldi	r24, 0xFF	; 255
 4c6:	8c 93       	st	X, r24
		lcd_init();
 4c8:	0e 94 60 01 	call	0x2c0	; 0x2c0 <_Z8lcd_initv>
		lcd_puts("Hello");
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	91 e0       	ldi	r25, 0x01	; 1
 4d0:	0e 94 48 01 	call	0x290	; 0x290 <_Z8lcd_putsPKc>
 4d4:	24 ef       	ldi	r18, 0xF4	; 244
 4d6:	31 e0       	ldi	r19, 0x01	; 1
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 4d8:	40 e9       	ldi	r20, 0x90	; 144
 4da:	51 e0       	ldi	r21, 0x01	; 1
 4dc:	ca 01       	movw	r24, r20
 4de:	01 97       	sbiw	r24, 0x01	; 1
 4e0:	f1 f7       	brne	.-4      	; 0x4de <main+0xd4>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4e2:	21 50       	subi	r18, 0x01	; 1
 4e4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4e6:	d1 f7       	brne	.-12     	; 0x4dc <main+0xd2>
								sprintf(buffer,"Butonul = %d", btnDOWN);
								break;
							}
						case btnSELECT:
							{
								sprintf(buffer,"Butonul = %d", btnSELECT);
 4e8:	c4 e1       	ldi	r28, 0x14	; 20
 4ea:	d1 e0       	ldi	r29, 0x01	; 1
 4ec:	06 e0       	ldi	r16, 0x06	; 6
 4ee:	11 e0       	ldi	r17, 0x01	; 1
 4f0:	66 24       	eor	r6, r6
 4f2:	77 24       	eor	r7, r7
 4f4:	68 94       	set
 4f6:	62 f8       	bld	r6, 2
								sprintf(buffer,"Butonul = %d", btnRIGHT);
								break;
							}
						case btnLEFT:
							{
								sprintf(buffer,"Butonul = %d", btnLEFT);
 4f8:	0f 2e       	mov	r0, r31
 4fa:	f3 e0       	ldi	r31, 0x03	; 3
 4fc:	4f 2e       	mov	r4, r31
 4fe:	55 24       	eor	r5, r5
 500:	f0 2d       	mov	r31, r0
								sprintf(buffer,"Butonul = %d", btnSELECT);
								break;
							}
						case btnNONE:
							{
								sprintf(buffer,"Butonul = %d", btnNONE);
 502:	0f 2e       	mov	r0, r31
 504:	f5 e0       	ldi	r31, 0x05	; 5
 506:	cf 2e       	mov	r12, r31
 508:	dd 24       	eor	r13, r13
 50a:	f0 2d       	mov	r31, r0
								sprintf(buffer,"Butonul = %d", btnLEFT);
								break;
							}
						case btnUP:
							{
								sprintf(buffer,"Butonul = %d", btnUP);
 50c:	aa 24       	eor	r10, r10
 50e:	bb 24       	eor	r11, r11
 510:	a3 94       	inc	r10
								break;
							}
						case btnDOWN:
							{
								sprintf(buffer,"Butonul = %d", btnDOWN);
 512:	88 24       	eor	r8, r8
 514:	99 24       	eor	r9, r9
 516:	68 94       	set
 518:	81 f8       	bld	r8, 1
 51a:	0f 2e       	mov	r0, r31
 51c:	f0 e2       	ldi	r31, 0x20	; 32
 51e:	ef 2e       	mov	r14, r31
 520:	fe e4       	ldi	r31, 0x4E	; 78
 522:	ff 2e       	mov	r15, r31
 524:	f0 2d       	mov	r31, r0
		lcd_puts("Hello");
		_delay_ms(50);
		
		while (1) 
			{
				lcd_clrscr();
 526:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <_Z10lcd_clrscrv>
				switch (read_LCD_buttons())               // depending on which button was pushed, we perform an action
 52a:	0e 94 6d 00 	call	0xda	; 0xda <_Z16read_LCD_buttonsv>
 52e:	82 30       	cpi	r24, 0x02	; 2
 530:	91 05       	cpc	r25, r1
 532:	09 f4       	brne	.+2      	; 0x536 <main+0x12c>
 534:	59 c0       	rjmp	.+178    	; 0x5e8 <main+0x1de>
 536:	83 30       	cpi	r24, 0x03	; 3
 538:	91 05       	cpc	r25, r1
 53a:	34 f4       	brge	.+12     	; 0x548 <main+0x13e>
 53c:	00 97       	sbiw	r24, 0x00	; 0
 53e:	79 f0       	breq	.+30     	; 0x55e <main+0x154>
 540:	01 97       	sbiw	r24, 0x01	; 1
 542:	09 f0       	breq	.+2      	; 0x546 <main+0x13c>
 544:	95 c0       	rjmp	.+298    	; 0x670 <main+0x266>
 546:	39 c0       	rjmp	.+114    	; 0x5ba <main+0x1b0>
 548:	84 30       	cpi	r24, 0x04	; 4
 54a:	91 05       	cpc	r25, r1
 54c:	09 f4       	brne	.+2      	; 0x550 <main+0x146>
 54e:	63 c0       	rjmp	.+198    	; 0x616 <main+0x20c>
 550:	84 30       	cpi	r24, 0x04	; 4
 552:	91 05       	cpc	r25, r1
 554:	dc f0       	brlt	.+54     	; 0x58c <main+0x182>
 556:	05 97       	sbiw	r24, 0x05	; 5
 558:	09 f0       	breq	.+2      	; 0x55c <main+0x152>
 55a:	8a c0       	rjmp	.+276    	; 0x670 <main+0x266>
 55c:	73 c0       	rjmp	.+230    	; 0x644 <main+0x23a>
					{
						case btnRIGHT:
							{
								sprintf(buffer,"Butonul = %d", btnRIGHT);
 55e:	00 d0       	rcall	.+0      	; 0x560 <main+0x156>
 560:	00 d0       	rcall	.+0      	; 0x562 <main+0x158>
 562:	00 d0       	rcall	.+0      	; 0x564 <main+0x15a>
 564:	ed b7       	in	r30, 0x3d	; 61
 566:	fe b7       	in	r31, 0x3e	; 62
 568:	31 96       	adiw	r30, 0x01	; 1
 56a:	d1 83       	std	Z+1, r29	; 0x01
 56c:	c0 83       	st	Z, r28
 56e:	13 83       	std	Z+3, r17	; 0x03
 570:	02 83       	std	Z+2, r16	; 0x02
 572:	15 82       	std	Z+5, r1	; 0x05
 574:	14 82       	std	Z+4, r1	; 0x04
 576:	0e 94 3f 03 	call	0x67e	; 0x67e <sprintf>
 57a:	8d b7       	in	r24, 0x3d	; 61
 57c:	9e b7       	in	r25, 0x3e	; 62
 57e:	06 96       	adiw	r24, 0x06	; 6
 580:	0f b6       	in	r0, 0x3f	; 63
 582:	f8 94       	cli
 584:	9e bf       	out	0x3e, r25	; 62
 586:	0f be       	out	0x3f, r0	; 63
 588:	8d bf       	out	0x3d, r24	; 61
 58a:	72 c0       	rjmp	.+228    	; 0x670 <main+0x266>
								break;
							}
						case btnLEFT:
							{
								sprintf(buffer,"Butonul = %d", btnLEFT);
 58c:	00 d0       	rcall	.+0      	; 0x58e <main+0x184>
 58e:	00 d0       	rcall	.+0      	; 0x590 <main+0x186>
 590:	00 d0       	rcall	.+0      	; 0x592 <main+0x188>
 592:	ed b7       	in	r30, 0x3d	; 61
 594:	fe b7       	in	r31, 0x3e	; 62
 596:	31 96       	adiw	r30, 0x01	; 1
 598:	d1 83       	std	Z+1, r29	; 0x01
 59a:	c0 83       	st	Z, r28
 59c:	13 83       	std	Z+3, r17	; 0x03
 59e:	02 83       	std	Z+2, r16	; 0x02
 5a0:	55 82       	std	Z+5, r5	; 0x05
 5a2:	44 82       	std	Z+4, r4	; 0x04
 5a4:	0e 94 3f 03 	call	0x67e	; 0x67e <sprintf>
 5a8:	8d b7       	in	r24, 0x3d	; 61
 5aa:	9e b7       	in	r25, 0x3e	; 62
 5ac:	06 96       	adiw	r24, 0x06	; 6
 5ae:	0f b6       	in	r0, 0x3f	; 63
 5b0:	f8 94       	cli
 5b2:	9e bf       	out	0x3e, r25	; 62
 5b4:	0f be       	out	0x3f, r0	; 63
 5b6:	8d bf       	out	0x3d, r24	; 61
 5b8:	5b c0       	rjmp	.+182    	; 0x670 <main+0x266>
								break;
							}
						case btnUP:
							{
								sprintf(buffer,"Butonul = %d", btnUP);
 5ba:	00 d0       	rcall	.+0      	; 0x5bc <main+0x1b2>
 5bc:	00 d0       	rcall	.+0      	; 0x5be <main+0x1b4>
 5be:	00 d0       	rcall	.+0      	; 0x5c0 <main+0x1b6>
 5c0:	ed b7       	in	r30, 0x3d	; 61
 5c2:	fe b7       	in	r31, 0x3e	; 62
 5c4:	31 96       	adiw	r30, 0x01	; 1
 5c6:	d1 83       	std	Z+1, r29	; 0x01
 5c8:	c0 83       	st	Z, r28
 5ca:	13 83       	std	Z+3, r17	; 0x03
 5cc:	02 83       	std	Z+2, r16	; 0x02
 5ce:	b5 82       	std	Z+5, r11	; 0x05
 5d0:	a4 82       	std	Z+4, r10	; 0x04
 5d2:	0e 94 3f 03 	call	0x67e	; 0x67e <sprintf>
 5d6:	8d b7       	in	r24, 0x3d	; 61
 5d8:	9e b7       	in	r25, 0x3e	; 62
 5da:	06 96       	adiw	r24, 0x06	; 6
 5dc:	0f b6       	in	r0, 0x3f	; 63
 5de:	f8 94       	cli
 5e0:	9e bf       	out	0x3e, r25	; 62
 5e2:	0f be       	out	0x3f, r0	; 63
 5e4:	8d bf       	out	0x3d, r24	; 61
 5e6:	44 c0       	rjmp	.+136    	; 0x670 <main+0x266>
								break;
							}
						case btnDOWN:
							{
								sprintf(buffer,"Butonul = %d", btnDOWN);
 5e8:	00 d0       	rcall	.+0      	; 0x5ea <main+0x1e0>
 5ea:	00 d0       	rcall	.+0      	; 0x5ec <main+0x1e2>
 5ec:	00 d0       	rcall	.+0      	; 0x5ee <main+0x1e4>
 5ee:	ed b7       	in	r30, 0x3d	; 61
 5f0:	fe b7       	in	r31, 0x3e	; 62
 5f2:	31 96       	adiw	r30, 0x01	; 1
 5f4:	d1 83       	std	Z+1, r29	; 0x01
 5f6:	c0 83       	st	Z, r28
 5f8:	13 83       	std	Z+3, r17	; 0x03
 5fa:	02 83       	std	Z+2, r16	; 0x02
 5fc:	95 82       	std	Z+5, r9	; 0x05
 5fe:	84 82       	std	Z+4, r8	; 0x04
 600:	0e 94 3f 03 	call	0x67e	; 0x67e <sprintf>
 604:	8d b7       	in	r24, 0x3d	; 61
 606:	9e b7       	in	r25, 0x3e	; 62
 608:	06 96       	adiw	r24, 0x06	; 6
 60a:	0f b6       	in	r0, 0x3f	; 63
 60c:	f8 94       	cli
 60e:	9e bf       	out	0x3e, r25	; 62
 610:	0f be       	out	0x3f, r0	; 63
 612:	8d bf       	out	0x3d, r24	; 61
 614:	2d c0       	rjmp	.+90     	; 0x670 <main+0x266>
								break;
							}
						case btnSELECT:
							{
								sprintf(buffer,"Butonul = %d", btnSELECT);
 616:	00 d0       	rcall	.+0      	; 0x618 <main+0x20e>
 618:	00 d0       	rcall	.+0      	; 0x61a <main+0x210>
 61a:	00 d0       	rcall	.+0      	; 0x61c <main+0x212>
 61c:	ed b7       	in	r30, 0x3d	; 61
 61e:	fe b7       	in	r31, 0x3e	; 62
 620:	31 96       	adiw	r30, 0x01	; 1
 622:	d1 83       	std	Z+1, r29	; 0x01
 624:	c0 83       	st	Z, r28
 626:	13 83       	std	Z+3, r17	; 0x03
 628:	02 83       	std	Z+2, r16	; 0x02
 62a:	75 82       	std	Z+5, r7	; 0x05
 62c:	64 82       	std	Z+4, r6	; 0x04
 62e:	0e 94 3f 03 	call	0x67e	; 0x67e <sprintf>
 632:	8d b7       	in	r24, 0x3d	; 61
 634:	9e b7       	in	r25, 0x3e	; 62
 636:	06 96       	adiw	r24, 0x06	; 6
 638:	0f b6       	in	r0, 0x3f	; 63
 63a:	f8 94       	cli
 63c:	9e bf       	out	0x3e, r25	; 62
 63e:	0f be       	out	0x3f, r0	; 63
 640:	8d bf       	out	0x3d, r24	; 61
 642:	16 c0       	rjmp	.+44     	; 0x670 <main+0x266>
								break;
							}
						case btnNONE:
							{
								sprintf(buffer,"Butonul = %d", btnNONE);
 644:	00 d0       	rcall	.+0      	; 0x646 <main+0x23c>
 646:	00 d0       	rcall	.+0      	; 0x648 <main+0x23e>
 648:	00 d0       	rcall	.+0      	; 0x64a <main+0x240>
 64a:	ed b7       	in	r30, 0x3d	; 61
 64c:	fe b7       	in	r31, 0x3e	; 62
 64e:	31 96       	adiw	r30, 0x01	; 1
 650:	d1 83       	std	Z+1, r29	; 0x01
 652:	c0 83       	st	Z, r28
 654:	13 83       	std	Z+3, r17	; 0x03
 656:	02 83       	std	Z+2, r16	; 0x02
 658:	d5 82       	std	Z+5, r13	; 0x05
 65a:	c4 82       	std	Z+4, r12	; 0x04
 65c:	0e 94 3f 03 	call	0x67e	; 0x67e <sprintf>
 660:	8d b7       	in	r24, 0x3d	; 61
 662:	9e b7       	in	r25, 0x3e	; 62
 664:	06 96       	adiw	r24, 0x06	; 6
 666:	0f b6       	in	r0, 0x3f	; 63
 668:	f8 94       	cli
 66a:	9e bf       	out	0x3e, r25	; 62
 66c:	0f be       	out	0x3f, r0	; 63
 66e:	8d bf       	out	0x3d, r24	; 61
								break;
							}
					}	
				lcd_puts(buffer);	
 670:	ce 01       	movw	r24, r28
 672:	0e 94 48 01 	call	0x290	; 0x290 <_Z8lcd_putsPKc>
 676:	c7 01       	movw	r24, r14
 678:	01 97       	sbiw	r24, 0x01	; 1
 67a:	f1 f7       	brne	.-4      	; 0x678 <main+0x26e>
 67c:	54 cf       	rjmp	.-344    	; 0x526 <main+0x11c>

0000067e <sprintf>:
 67e:	ae e0       	ldi	r26, 0x0E	; 14
 680:	b0 e0       	ldi	r27, 0x00	; 0
 682:	e5 e4       	ldi	r30, 0x45	; 69
 684:	f3 e0       	ldi	r31, 0x03	; 3
 686:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__prologue_saves__+0x1c>
 68a:	0d 89       	ldd	r16, Y+21	; 0x15
 68c:	1e 89       	ldd	r17, Y+22	; 0x16
 68e:	86 e0       	ldi	r24, 0x06	; 6
 690:	8c 83       	std	Y+4, r24	; 0x04
 692:	1a 83       	std	Y+2, r17	; 0x02
 694:	09 83       	std	Y+1, r16	; 0x01
 696:	8f ef       	ldi	r24, 0xFF	; 255
 698:	9f e7       	ldi	r25, 0x7F	; 127
 69a:	9e 83       	std	Y+6, r25	; 0x06
 69c:	8d 83       	std	Y+5, r24	; 0x05
 69e:	9e 01       	movw	r18, r28
 6a0:	27 5e       	subi	r18, 0xE7	; 231
 6a2:	3f 4f       	sbci	r19, 0xFF	; 255
 6a4:	ce 01       	movw	r24, r28
 6a6:	01 96       	adiw	r24, 0x01	; 1
 6a8:	6f 89       	ldd	r22, Y+23	; 0x17
 6aa:	78 8d       	ldd	r23, Y+24	; 0x18
 6ac:	a9 01       	movw	r20, r18
 6ae:	0e 94 63 03 	call	0x6c6	; 0x6c6 <vfprintf>
 6b2:	2f 81       	ldd	r18, Y+7	; 0x07
 6b4:	38 85       	ldd	r19, Y+8	; 0x08
 6b6:	02 0f       	add	r16, r18
 6b8:	13 1f       	adc	r17, r19
 6ba:	f8 01       	movw	r30, r16
 6bc:	10 82       	st	Z, r1
 6be:	2e 96       	adiw	r28, 0x0e	; 14
 6c0:	e4 e0       	ldi	r30, 0x04	; 4
 6c2:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__epilogue_restores__+0x1c>

000006c6 <vfprintf>:
 6c6:	ab e0       	ldi	r26, 0x0B	; 11
 6c8:	b0 e0       	ldi	r27, 0x00	; 0
 6ca:	e9 e6       	ldi	r30, 0x69	; 105
 6cc:	f3 e0       	ldi	r31, 0x03	; 3
 6ce:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__prologue_saves__>
 6d2:	3c 01       	movw	r6, r24
 6d4:	2b 01       	movw	r4, r22
 6d6:	5a 01       	movw	r10, r20
 6d8:	fc 01       	movw	r30, r24
 6da:	17 82       	std	Z+7, r1	; 0x07
 6dc:	16 82       	std	Z+6, r1	; 0x06
 6de:	83 81       	ldd	r24, Z+3	; 0x03
 6e0:	81 fd       	sbrc	r24, 1
 6e2:	03 c0       	rjmp	.+6      	; 0x6ea <vfprintf+0x24>
 6e4:	6f ef       	ldi	r22, 0xFF	; 255
 6e6:	7f ef       	ldi	r23, 0xFF	; 255
 6e8:	c6 c1       	rjmp	.+908    	; 0xa76 <__stack+0x177>
 6ea:	9a e0       	ldi	r25, 0x0A	; 10
 6ec:	89 2e       	mov	r8, r25
 6ee:	1e 01       	movw	r2, r28
 6f0:	08 94       	sec
 6f2:	21 1c       	adc	r2, r1
 6f4:	31 1c       	adc	r3, r1
 6f6:	f3 01       	movw	r30, r6
 6f8:	23 81       	ldd	r18, Z+3	; 0x03
 6fa:	f2 01       	movw	r30, r4
 6fc:	23 fd       	sbrc	r18, 3
 6fe:	85 91       	lpm	r24, Z+
 700:	23 ff       	sbrs	r18, 3
 702:	81 91       	ld	r24, Z+
 704:	2f 01       	movw	r4, r30
 706:	88 23       	and	r24, r24
 708:	09 f4       	brne	.+2      	; 0x70c <vfprintf+0x46>
 70a:	b2 c1       	rjmp	.+868    	; 0xa70 <__stack+0x171>
 70c:	85 32       	cpi	r24, 0x25	; 37
 70e:	39 f4       	brne	.+14     	; 0x71e <vfprintf+0x58>
 710:	23 fd       	sbrc	r18, 3
 712:	85 91       	lpm	r24, Z+
 714:	23 ff       	sbrs	r18, 3
 716:	81 91       	ld	r24, Z+
 718:	2f 01       	movw	r4, r30
 71a:	85 32       	cpi	r24, 0x25	; 37
 71c:	29 f4       	brne	.+10     	; 0x728 <vfprintf+0x62>
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	b3 01       	movw	r22, r6
 722:	0e 94 56 05 	call	0xaac	; 0xaac <fputc>
 726:	e7 cf       	rjmp	.-50     	; 0x6f6 <vfprintf+0x30>
 728:	98 2f       	mov	r25, r24
 72a:	ff 24       	eor	r15, r15
 72c:	ee 24       	eor	r14, r14
 72e:	99 24       	eor	r9, r9
 730:	ff e1       	ldi	r31, 0x1F	; 31
 732:	ff 15       	cp	r31, r15
 734:	d0 f0       	brcs	.+52     	; 0x76a <vfprintf+0xa4>
 736:	9b 32       	cpi	r25, 0x2B	; 43
 738:	69 f0       	breq	.+26     	; 0x754 <vfprintf+0x8e>
 73a:	9c 32       	cpi	r25, 0x2C	; 44
 73c:	28 f4       	brcc	.+10     	; 0x748 <vfprintf+0x82>
 73e:	90 32       	cpi	r25, 0x20	; 32
 740:	59 f0       	breq	.+22     	; 0x758 <vfprintf+0x92>
 742:	93 32       	cpi	r25, 0x23	; 35
 744:	91 f4       	brne	.+36     	; 0x76a <vfprintf+0xa4>
 746:	0e c0       	rjmp	.+28     	; 0x764 <vfprintf+0x9e>
 748:	9d 32       	cpi	r25, 0x2D	; 45
 74a:	49 f0       	breq	.+18     	; 0x75e <vfprintf+0x98>
 74c:	90 33       	cpi	r25, 0x30	; 48
 74e:	69 f4       	brne	.+26     	; 0x76a <vfprintf+0xa4>
 750:	41 e0       	ldi	r20, 0x01	; 1
 752:	24 c0       	rjmp	.+72     	; 0x79c <vfprintf+0xd6>
 754:	52 e0       	ldi	r21, 0x02	; 2
 756:	f5 2a       	or	r15, r21
 758:	84 e0       	ldi	r24, 0x04	; 4
 75a:	f8 2a       	or	r15, r24
 75c:	28 c0       	rjmp	.+80     	; 0x7ae <vfprintf+0xe8>
 75e:	98 e0       	ldi	r25, 0x08	; 8
 760:	f9 2a       	or	r15, r25
 762:	25 c0       	rjmp	.+74     	; 0x7ae <vfprintf+0xe8>
 764:	e0 e1       	ldi	r30, 0x10	; 16
 766:	fe 2a       	or	r15, r30
 768:	22 c0       	rjmp	.+68     	; 0x7ae <vfprintf+0xe8>
 76a:	f7 fc       	sbrc	r15, 7
 76c:	29 c0       	rjmp	.+82     	; 0x7c0 <vfprintf+0xfa>
 76e:	89 2f       	mov	r24, r25
 770:	80 53       	subi	r24, 0x30	; 48
 772:	8a 30       	cpi	r24, 0x0A	; 10
 774:	70 f4       	brcc	.+28     	; 0x792 <vfprintf+0xcc>
 776:	f6 fe       	sbrs	r15, 6
 778:	05 c0       	rjmp	.+10     	; 0x784 <vfprintf+0xbe>
 77a:	98 9c       	mul	r9, r8
 77c:	90 2c       	mov	r9, r0
 77e:	11 24       	eor	r1, r1
 780:	98 0e       	add	r9, r24
 782:	15 c0       	rjmp	.+42     	; 0x7ae <vfprintf+0xe8>
 784:	e8 9c       	mul	r14, r8
 786:	e0 2c       	mov	r14, r0
 788:	11 24       	eor	r1, r1
 78a:	e8 0e       	add	r14, r24
 78c:	f0 e2       	ldi	r31, 0x20	; 32
 78e:	ff 2a       	or	r15, r31
 790:	0e c0       	rjmp	.+28     	; 0x7ae <vfprintf+0xe8>
 792:	9e 32       	cpi	r25, 0x2E	; 46
 794:	29 f4       	brne	.+10     	; 0x7a0 <vfprintf+0xda>
 796:	f6 fc       	sbrc	r15, 6
 798:	6b c1       	rjmp	.+726    	; 0xa70 <__stack+0x171>
 79a:	40 e4       	ldi	r20, 0x40	; 64
 79c:	f4 2a       	or	r15, r20
 79e:	07 c0       	rjmp	.+14     	; 0x7ae <vfprintf+0xe8>
 7a0:	9c 36       	cpi	r25, 0x6C	; 108
 7a2:	19 f4       	brne	.+6      	; 0x7aa <vfprintf+0xe4>
 7a4:	50 e8       	ldi	r21, 0x80	; 128
 7a6:	f5 2a       	or	r15, r21
 7a8:	02 c0       	rjmp	.+4      	; 0x7ae <vfprintf+0xe8>
 7aa:	98 36       	cpi	r25, 0x68	; 104
 7ac:	49 f4       	brne	.+18     	; 0x7c0 <vfprintf+0xfa>
 7ae:	f2 01       	movw	r30, r4
 7b0:	23 fd       	sbrc	r18, 3
 7b2:	95 91       	lpm	r25, Z+
 7b4:	23 ff       	sbrs	r18, 3
 7b6:	91 91       	ld	r25, Z+
 7b8:	2f 01       	movw	r4, r30
 7ba:	99 23       	and	r25, r25
 7bc:	09 f0       	breq	.+2      	; 0x7c0 <vfprintf+0xfa>
 7be:	b8 cf       	rjmp	.-144    	; 0x730 <vfprintf+0x6a>
 7c0:	89 2f       	mov	r24, r25
 7c2:	85 54       	subi	r24, 0x45	; 69
 7c4:	83 30       	cpi	r24, 0x03	; 3
 7c6:	18 f0       	brcs	.+6      	; 0x7ce <vfprintf+0x108>
 7c8:	80 52       	subi	r24, 0x20	; 32
 7ca:	83 30       	cpi	r24, 0x03	; 3
 7cc:	38 f4       	brcc	.+14     	; 0x7dc <vfprintf+0x116>
 7ce:	44 e0       	ldi	r20, 0x04	; 4
 7d0:	50 e0       	ldi	r21, 0x00	; 0
 7d2:	a4 0e       	add	r10, r20
 7d4:	b5 1e       	adc	r11, r21
 7d6:	5f e3       	ldi	r21, 0x3F	; 63
 7d8:	59 83       	std	Y+1, r21	; 0x01
 7da:	0f c0       	rjmp	.+30     	; 0x7fa <vfprintf+0x134>
 7dc:	93 36       	cpi	r25, 0x63	; 99
 7de:	31 f0       	breq	.+12     	; 0x7ec <vfprintf+0x126>
 7e0:	93 37       	cpi	r25, 0x73	; 115
 7e2:	79 f0       	breq	.+30     	; 0x802 <vfprintf+0x13c>
 7e4:	93 35       	cpi	r25, 0x53	; 83
 7e6:	09 f0       	breq	.+2      	; 0x7ea <vfprintf+0x124>
 7e8:	56 c0       	rjmp	.+172    	; 0x896 <vfprintf+0x1d0>
 7ea:	20 c0       	rjmp	.+64     	; 0x82c <vfprintf+0x166>
 7ec:	f5 01       	movw	r30, r10
 7ee:	80 81       	ld	r24, Z
 7f0:	89 83       	std	Y+1, r24	; 0x01
 7f2:	42 e0       	ldi	r20, 0x02	; 2
 7f4:	50 e0       	ldi	r21, 0x00	; 0
 7f6:	a4 0e       	add	r10, r20
 7f8:	b5 1e       	adc	r11, r21
 7fa:	61 01       	movw	r12, r2
 7fc:	01 e0       	ldi	r16, 0x01	; 1
 7fe:	10 e0       	ldi	r17, 0x00	; 0
 800:	12 c0       	rjmp	.+36     	; 0x826 <vfprintf+0x160>
 802:	f5 01       	movw	r30, r10
 804:	c0 80       	ld	r12, Z
 806:	d1 80       	ldd	r13, Z+1	; 0x01
 808:	f6 fc       	sbrc	r15, 6
 80a:	03 c0       	rjmp	.+6      	; 0x812 <vfprintf+0x14c>
 80c:	6f ef       	ldi	r22, 0xFF	; 255
 80e:	7f ef       	ldi	r23, 0xFF	; 255
 810:	02 c0       	rjmp	.+4      	; 0x816 <vfprintf+0x150>
 812:	69 2d       	mov	r22, r9
 814:	70 e0       	ldi	r23, 0x00	; 0
 816:	42 e0       	ldi	r20, 0x02	; 2
 818:	50 e0       	ldi	r21, 0x00	; 0
 81a:	a4 0e       	add	r10, r20
 81c:	b5 1e       	adc	r11, r21
 81e:	c6 01       	movw	r24, r12
 820:	0e 94 4b 05 	call	0xa96	; 0xa96 <strnlen>
 824:	8c 01       	movw	r16, r24
 826:	5f e7       	ldi	r21, 0x7F	; 127
 828:	f5 22       	and	r15, r21
 82a:	14 c0       	rjmp	.+40     	; 0x854 <vfprintf+0x18e>
 82c:	f5 01       	movw	r30, r10
 82e:	c0 80       	ld	r12, Z
 830:	d1 80       	ldd	r13, Z+1	; 0x01
 832:	f6 fc       	sbrc	r15, 6
 834:	03 c0       	rjmp	.+6      	; 0x83c <vfprintf+0x176>
 836:	6f ef       	ldi	r22, 0xFF	; 255
 838:	7f ef       	ldi	r23, 0xFF	; 255
 83a:	02 c0       	rjmp	.+4      	; 0x840 <vfprintf+0x17a>
 83c:	69 2d       	mov	r22, r9
 83e:	70 e0       	ldi	r23, 0x00	; 0
 840:	42 e0       	ldi	r20, 0x02	; 2
 842:	50 e0       	ldi	r21, 0x00	; 0
 844:	a4 0e       	add	r10, r20
 846:	b5 1e       	adc	r11, r21
 848:	c6 01       	movw	r24, r12
 84a:	0e 94 40 05 	call	0xa80	; 0xa80 <strnlen_P>
 84e:	8c 01       	movw	r16, r24
 850:	50 e8       	ldi	r21, 0x80	; 128
 852:	f5 2a       	or	r15, r21
 854:	f3 fe       	sbrs	r15, 3
 856:	07 c0       	rjmp	.+14     	; 0x866 <vfprintf+0x1a0>
 858:	1a c0       	rjmp	.+52     	; 0x88e <vfprintf+0x1c8>
 85a:	80 e2       	ldi	r24, 0x20	; 32
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	b3 01       	movw	r22, r6
 860:	0e 94 56 05 	call	0xaac	; 0xaac <fputc>
 864:	ea 94       	dec	r14
 866:	8e 2d       	mov	r24, r14
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	08 17       	cp	r16, r24
 86c:	19 07       	cpc	r17, r25
 86e:	a8 f3       	brcs	.-22     	; 0x85a <vfprintf+0x194>
 870:	0e c0       	rjmp	.+28     	; 0x88e <vfprintf+0x1c8>
 872:	f6 01       	movw	r30, r12
 874:	f7 fc       	sbrc	r15, 7
 876:	85 91       	lpm	r24, Z+
 878:	f7 fe       	sbrs	r15, 7
 87a:	81 91       	ld	r24, Z+
 87c:	6f 01       	movw	r12, r30
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	b3 01       	movw	r22, r6
 882:	0e 94 56 05 	call	0xaac	; 0xaac <fputc>
 886:	e1 10       	cpse	r14, r1
 888:	ea 94       	dec	r14
 88a:	01 50       	subi	r16, 0x01	; 1
 88c:	10 40       	sbci	r17, 0x00	; 0
 88e:	01 15       	cp	r16, r1
 890:	11 05       	cpc	r17, r1
 892:	79 f7       	brne	.-34     	; 0x872 <vfprintf+0x1ac>
 894:	ea c0       	rjmp	.+468    	; 0xa6a <__stack+0x16b>
 896:	94 36       	cpi	r25, 0x64	; 100
 898:	11 f0       	breq	.+4      	; 0x89e <vfprintf+0x1d8>
 89a:	99 36       	cpi	r25, 0x69	; 105
 89c:	69 f5       	brne	.+90     	; 0x8f8 <vfprintf+0x232>
 89e:	f7 fe       	sbrs	r15, 7
 8a0:	08 c0       	rjmp	.+16     	; 0x8b2 <vfprintf+0x1ec>
 8a2:	f5 01       	movw	r30, r10
 8a4:	20 81       	ld	r18, Z
 8a6:	31 81       	ldd	r19, Z+1	; 0x01
 8a8:	42 81       	ldd	r20, Z+2	; 0x02
 8aa:	53 81       	ldd	r21, Z+3	; 0x03
 8ac:	84 e0       	ldi	r24, 0x04	; 4
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	0a c0       	rjmp	.+20     	; 0x8c6 <vfprintf+0x200>
 8b2:	f5 01       	movw	r30, r10
 8b4:	80 81       	ld	r24, Z
 8b6:	91 81       	ldd	r25, Z+1	; 0x01
 8b8:	9c 01       	movw	r18, r24
 8ba:	44 27       	eor	r20, r20
 8bc:	37 fd       	sbrc	r19, 7
 8be:	40 95       	com	r20
 8c0:	54 2f       	mov	r21, r20
 8c2:	82 e0       	ldi	r24, 0x02	; 2
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	a8 0e       	add	r10, r24
 8c8:	b9 1e       	adc	r11, r25
 8ca:	9f e6       	ldi	r25, 0x6F	; 111
 8cc:	f9 22       	and	r15, r25
 8ce:	57 ff       	sbrs	r21, 7
 8d0:	09 c0       	rjmp	.+18     	; 0x8e4 <vfprintf+0x21e>
 8d2:	50 95       	com	r21
 8d4:	40 95       	com	r20
 8d6:	30 95       	com	r19
 8d8:	21 95       	neg	r18
 8da:	3f 4f       	sbci	r19, 0xFF	; 255
 8dc:	4f 4f       	sbci	r20, 0xFF	; 255
 8de:	5f 4f       	sbci	r21, 0xFF	; 255
 8e0:	e0 e8       	ldi	r30, 0x80	; 128
 8e2:	fe 2a       	or	r15, r30
 8e4:	ca 01       	movw	r24, r20
 8e6:	b9 01       	movw	r22, r18
 8e8:	a1 01       	movw	r20, r2
 8ea:	2a e0       	ldi	r18, 0x0A	; 10
 8ec:	30 e0       	ldi	r19, 0x00	; 0
 8ee:	0e 94 82 05 	call	0xb04	; 0xb04 <__ultoa_invert>
 8f2:	d8 2e       	mov	r13, r24
 8f4:	d2 18       	sub	r13, r2
 8f6:	40 c0       	rjmp	.+128    	; 0x978 <__stack+0x79>
 8f8:	95 37       	cpi	r25, 0x75	; 117
 8fa:	29 f4       	brne	.+10     	; 0x906 <__stack+0x7>
 8fc:	1f 2d       	mov	r17, r15
 8fe:	1f 7e       	andi	r17, 0xEF	; 239
 900:	2a e0       	ldi	r18, 0x0A	; 10
 902:	30 e0       	ldi	r19, 0x00	; 0
 904:	1d c0       	rjmp	.+58     	; 0x940 <__stack+0x41>
 906:	1f 2d       	mov	r17, r15
 908:	19 7f       	andi	r17, 0xF9	; 249
 90a:	9f 36       	cpi	r25, 0x6F	; 111
 90c:	61 f0       	breq	.+24     	; 0x926 <__stack+0x27>
 90e:	90 37       	cpi	r25, 0x70	; 112
 910:	20 f4       	brcc	.+8      	; 0x91a <__stack+0x1b>
 912:	98 35       	cpi	r25, 0x58	; 88
 914:	09 f0       	breq	.+2      	; 0x918 <__stack+0x19>
 916:	ac c0       	rjmp	.+344    	; 0xa70 <__stack+0x171>
 918:	0f c0       	rjmp	.+30     	; 0x938 <__stack+0x39>
 91a:	90 37       	cpi	r25, 0x70	; 112
 91c:	39 f0       	breq	.+14     	; 0x92c <__stack+0x2d>
 91e:	98 37       	cpi	r25, 0x78	; 120
 920:	09 f0       	breq	.+2      	; 0x924 <__stack+0x25>
 922:	a6 c0       	rjmp	.+332    	; 0xa70 <__stack+0x171>
 924:	04 c0       	rjmp	.+8      	; 0x92e <__stack+0x2f>
 926:	28 e0       	ldi	r18, 0x08	; 8
 928:	30 e0       	ldi	r19, 0x00	; 0
 92a:	0a c0       	rjmp	.+20     	; 0x940 <__stack+0x41>
 92c:	10 61       	ori	r17, 0x10	; 16
 92e:	14 fd       	sbrc	r17, 4
 930:	14 60       	ori	r17, 0x04	; 4
 932:	20 e1       	ldi	r18, 0x10	; 16
 934:	30 e0       	ldi	r19, 0x00	; 0
 936:	04 c0       	rjmp	.+8      	; 0x940 <__stack+0x41>
 938:	14 fd       	sbrc	r17, 4
 93a:	16 60       	ori	r17, 0x06	; 6
 93c:	20 e1       	ldi	r18, 0x10	; 16
 93e:	32 e0       	ldi	r19, 0x02	; 2
 940:	17 ff       	sbrs	r17, 7
 942:	08 c0       	rjmp	.+16     	; 0x954 <__stack+0x55>
 944:	f5 01       	movw	r30, r10
 946:	60 81       	ld	r22, Z
 948:	71 81       	ldd	r23, Z+1	; 0x01
 94a:	82 81       	ldd	r24, Z+2	; 0x02
 94c:	93 81       	ldd	r25, Z+3	; 0x03
 94e:	44 e0       	ldi	r20, 0x04	; 4
 950:	50 e0       	ldi	r21, 0x00	; 0
 952:	08 c0       	rjmp	.+16     	; 0x964 <__stack+0x65>
 954:	f5 01       	movw	r30, r10
 956:	80 81       	ld	r24, Z
 958:	91 81       	ldd	r25, Z+1	; 0x01
 95a:	bc 01       	movw	r22, r24
 95c:	80 e0       	ldi	r24, 0x00	; 0
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	42 e0       	ldi	r20, 0x02	; 2
 962:	50 e0       	ldi	r21, 0x00	; 0
 964:	a4 0e       	add	r10, r20
 966:	b5 1e       	adc	r11, r21
 968:	a1 01       	movw	r20, r2
 96a:	0e 94 82 05 	call	0xb04	; 0xb04 <__ultoa_invert>
 96e:	d8 2e       	mov	r13, r24
 970:	d2 18       	sub	r13, r2
 972:	8f e7       	ldi	r24, 0x7F	; 127
 974:	f8 2e       	mov	r15, r24
 976:	f1 22       	and	r15, r17
 978:	f6 fe       	sbrs	r15, 6
 97a:	0b c0       	rjmp	.+22     	; 0x992 <__stack+0x93>
 97c:	5e ef       	ldi	r21, 0xFE	; 254
 97e:	f5 22       	and	r15, r21
 980:	d9 14       	cp	r13, r9
 982:	38 f4       	brcc	.+14     	; 0x992 <__stack+0x93>
 984:	f4 fe       	sbrs	r15, 4
 986:	07 c0       	rjmp	.+14     	; 0x996 <__stack+0x97>
 988:	f2 fc       	sbrc	r15, 2
 98a:	05 c0       	rjmp	.+10     	; 0x996 <__stack+0x97>
 98c:	8f ee       	ldi	r24, 0xEF	; 239
 98e:	f8 22       	and	r15, r24
 990:	02 c0       	rjmp	.+4      	; 0x996 <__stack+0x97>
 992:	1d 2d       	mov	r17, r13
 994:	01 c0       	rjmp	.+2      	; 0x998 <__stack+0x99>
 996:	19 2d       	mov	r17, r9
 998:	f4 fe       	sbrs	r15, 4
 99a:	0d c0       	rjmp	.+26     	; 0x9b6 <__stack+0xb7>
 99c:	fe 01       	movw	r30, r28
 99e:	ed 0d       	add	r30, r13
 9a0:	f1 1d       	adc	r31, r1
 9a2:	80 81       	ld	r24, Z
 9a4:	80 33       	cpi	r24, 0x30	; 48
 9a6:	19 f4       	brne	.+6      	; 0x9ae <__stack+0xaf>
 9a8:	99 ee       	ldi	r25, 0xE9	; 233
 9aa:	f9 22       	and	r15, r25
 9ac:	08 c0       	rjmp	.+16     	; 0x9be <__stack+0xbf>
 9ae:	1f 5f       	subi	r17, 0xFF	; 255
 9b0:	f2 fe       	sbrs	r15, 2
 9b2:	05 c0       	rjmp	.+10     	; 0x9be <__stack+0xbf>
 9b4:	03 c0       	rjmp	.+6      	; 0x9bc <__stack+0xbd>
 9b6:	8f 2d       	mov	r24, r15
 9b8:	86 78       	andi	r24, 0x86	; 134
 9ba:	09 f0       	breq	.+2      	; 0x9be <__stack+0xbf>
 9bc:	1f 5f       	subi	r17, 0xFF	; 255
 9be:	0f 2d       	mov	r16, r15
 9c0:	f3 fc       	sbrc	r15, 3
 9c2:	14 c0       	rjmp	.+40     	; 0x9ec <__stack+0xed>
 9c4:	f0 fe       	sbrs	r15, 0
 9c6:	0f c0       	rjmp	.+30     	; 0x9e6 <__stack+0xe7>
 9c8:	1e 15       	cp	r17, r14
 9ca:	10 f0       	brcs	.+4      	; 0x9d0 <__stack+0xd1>
 9cc:	9d 2c       	mov	r9, r13
 9ce:	0b c0       	rjmp	.+22     	; 0x9e6 <__stack+0xe7>
 9d0:	9d 2c       	mov	r9, r13
 9d2:	9e 0c       	add	r9, r14
 9d4:	91 1a       	sub	r9, r17
 9d6:	1e 2d       	mov	r17, r14
 9d8:	06 c0       	rjmp	.+12     	; 0x9e6 <__stack+0xe7>
 9da:	80 e2       	ldi	r24, 0x20	; 32
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	b3 01       	movw	r22, r6
 9e0:	0e 94 56 05 	call	0xaac	; 0xaac <fputc>
 9e4:	1f 5f       	subi	r17, 0xFF	; 255
 9e6:	1e 15       	cp	r17, r14
 9e8:	c0 f3       	brcs	.-16     	; 0x9da <__stack+0xdb>
 9ea:	04 c0       	rjmp	.+8      	; 0x9f4 <__stack+0xf5>
 9ec:	1e 15       	cp	r17, r14
 9ee:	10 f4       	brcc	.+4      	; 0x9f4 <__stack+0xf5>
 9f0:	e1 1a       	sub	r14, r17
 9f2:	01 c0       	rjmp	.+2      	; 0x9f6 <__stack+0xf7>
 9f4:	ee 24       	eor	r14, r14
 9f6:	04 ff       	sbrs	r16, 4
 9f8:	0f c0       	rjmp	.+30     	; 0xa18 <__stack+0x119>
 9fa:	80 e3       	ldi	r24, 0x30	; 48
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	b3 01       	movw	r22, r6
 a00:	0e 94 56 05 	call	0xaac	; 0xaac <fputc>
 a04:	02 ff       	sbrs	r16, 2
 a06:	1d c0       	rjmp	.+58     	; 0xa42 <__stack+0x143>
 a08:	01 fd       	sbrc	r16, 1
 a0a:	03 c0       	rjmp	.+6      	; 0xa12 <__stack+0x113>
 a0c:	88 e7       	ldi	r24, 0x78	; 120
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	0e c0       	rjmp	.+28     	; 0xa2e <__stack+0x12f>
 a12:	88 e5       	ldi	r24, 0x58	; 88
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	0b c0       	rjmp	.+22     	; 0xa2e <__stack+0x12f>
 a18:	80 2f       	mov	r24, r16
 a1a:	86 78       	andi	r24, 0x86	; 134
 a1c:	91 f0       	breq	.+36     	; 0xa42 <__stack+0x143>
 a1e:	01 ff       	sbrs	r16, 1
 a20:	02 c0       	rjmp	.+4      	; 0xa26 <__stack+0x127>
 a22:	8b e2       	ldi	r24, 0x2B	; 43
 a24:	01 c0       	rjmp	.+2      	; 0xa28 <__stack+0x129>
 a26:	80 e2       	ldi	r24, 0x20	; 32
 a28:	f7 fc       	sbrc	r15, 7
 a2a:	8d e2       	ldi	r24, 0x2D	; 45
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	b3 01       	movw	r22, r6
 a30:	0e 94 56 05 	call	0xaac	; 0xaac <fputc>
 a34:	06 c0       	rjmp	.+12     	; 0xa42 <__stack+0x143>
 a36:	80 e3       	ldi	r24, 0x30	; 48
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	b3 01       	movw	r22, r6
 a3c:	0e 94 56 05 	call	0xaac	; 0xaac <fputc>
 a40:	9a 94       	dec	r9
 a42:	d9 14       	cp	r13, r9
 a44:	c0 f3       	brcs	.-16     	; 0xa36 <__stack+0x137>
 a46:	da 94       	dec	r13
 a48:	f1 01       	movw	r30, r2
 a4a:	ed 0d       	add	r30, r13
 a4c:	f1 1d       	adc	r31, r1
 a4e:	80 81       	ld	r24, Z
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	b3 01       	movw	r22, r6
 a54:	0e 94 56 05 	call	0xaac	; 0xaac <fputc>
 a58:	dd 20       	and	r13, r13
 a5a:	a9 f7       	brne	.-22     	; 0xa46 <__stack+0x147>
 a5c:	06 c0       	rjmp	.+12     	; 0xa6a <__stack+0x16b>
 a5e:	80 e2       	ldi	r24, 0x20	; 32
 a60:	90 e0       	ldi	r25, 0x00	; 0
 a62:	b3 01       	movw	r22, r6
 a64:	0e 94 56 05 	call	0xaac	; 0xaac <fputc>
 a68:	ea 94       	dec	r14
 a6a:	ee 20       	and	r14, r14
 a6c:	c1 f7       	brne	.-16     	; 0xa5e <__stack+0x15f>
 a6e:	43 ce       	rjmp	.-890    	; 0x6f6 <vfprintf+0x30>
 a70:	f3 01       	movw	r30, r6
 a72:	66 81       	ldd	r22, Z+6	; 0x06
 a74:	77 81       	ldd	r23, Z+7	; 0x07
 a76:	cb 01       	movw	r24, r22
 a78:	2b 96       	adiw	r28, 0x0b	; 11
 a7a:	e2 e1       	ldi	r30, 0x12	; 18
 a7c:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__epilogue_restores__>

00000a80 <strnlen_P>:
 a80:	fc 01       	movw	r30, r24
 a82:	05 90       	lpm	r0, Z+
 a84:	61 50       	subi	r22, 0x01	; 1
 a86:	70 40       	sbci	r23, 0x00	; 0
 a88:	01 10       	cpse	r0, r1
 a8a:	d8 f7       	brcc	.-10     	; 0xa82 <strnlen_P+0x2>
 a8c:	80 95       	com	r24
 a8e:	90 95       	com	r25
 a90:	8e 0f       	add	r24, r30
 a92:	9f 1f       	adc	r25, r31
 a94:	08 95       	ret

00000a96 <strnlen>:
 a96:	fc 01       	movw	r30, r24
 a98:	61 50       	subi	r22, 0x01	; 1
 a9a:	70 40       	sbci	r23, 0x00	; 0
 a9c:	01 90       	ld	r0, Z+
 a9e:	01 10       	cpse	r0, r1
 aa0:	d8 f7       	brcc	.-10     	; 0xa98 <strnlen+0x2>
 aa2:	80 95       	com	r24
 aa4:	90 95       	com	r25
 aa6:	8e 0f       	add	r24, r30
 aa8:	9f 1f       	adc	r25, r31
 aaa:	08 95       	ret

00000aac <fputc>:
 aac:	0f 93       	push	r16
 aae:	1f 93       	push	r17
 ab0:	cf 93       	push	r28
 ab2:	df 93       	push	r29
 ab4:	8c 01       	movw	r16, r24
 ab6:	eb 01       	movw	r28, r22
 ab8:	8b 81       	ldd	r24, Y+3	; 0x03
 aba:	81 ff       	sbrs	r24, 1
 abc:	1b c0       	rjmp	.+54     	; 0xaf4 <fputc+0x48>
 abe:	82 ff       	sbrs	r24, 2
 ac0:	0d c0       	rjmp	.+26     	; 0xadc <fputc+0x30>
 ac2:	2e 81       	ldd	r18, Y+6	; 0x06
 ac4:	3f 81       	ldd	r19, Y+7	; 0x07
 ac6:	8c 81       	ldd	r24, Y+4	; 0x04
 ac8:	9d 81       	ldd	r25, Y+5	; 0x05
 aca:	28 17       	cp	r18, r24
 acc:	39 07       	cpc	r19, r25
 ace:	64 f4       	brge	.+24     	; 0xae8 <fputc+0x3c>
 ad0:	e8 81       	ld	r30, Y
 ad2:	f9 81       	ldd	r31, Y+1	; 0x01
 ad4:	01 93       	st	Z+, r16
 ad6:	f9 83       	std	Y+1, r31	; 0x01
 ad8:	e8 83       	st	Y, r30
 ada:	06 c0       	rjmp	.+12     	; 0xae8 <fputc+0x3c>
 adc:	e8 85       	ldd	r30, Y+8	; 0x08
 ade:	f9 85       	ldd	r31, Y+9	; 0x09
 ae0:	80 2f       	mov	r24, r16
 ae2:	09 95       	icall
 ae4:	89 2b       	or	r24, r25
 ae6:	31 f4       	brne	.+12     	; 0xaf4 <fputc+0x48>
 ae8:	8e 81       	ldd	r24, Y+6	; 0x06
 aea:	9f 81       	ldd	r25, Y+7	; 0x07
 aec:	01 96       	adiw	r24, 0x01	; 1
 aee:	9f 83       	std	Y+7, r25	; 0x07
 af0:	8e 83       	std	Y+6, r24	; 0x06
 af2:	02 c0       	rjmp	.+4      	; 0xaf8 <fputc+0x4c>
 af4:	0f ef       	ldi	r16, 0xFF	; 255
 af6:	1f ef       	ldi	r17, 0xFF	; 255
 af8:	c8 01       	movw	r24, r16
 afa:	df 91       	pop	r29
 afc:	cf 91       	pop	r28
 afe:	1f 91       	pop	r17
 b00:	0f 91       	pop	r16
 b02:	08 95       	ret

00000b04 <__ultoa_invert>:
 b04:	fa 01       	movw	r30, r20
 b06:	aa 27       	eor	r26, r26
 b08:	28 30       	cpi	r18, 0x08	; 8
 b0a:	51 f1       	breq	.+84     	; 0xb60 <__ultoa_invert+0x5c>
 b0c:	20 31       	cpi	r18, 0x10	; 16
 b0e:	81 f1       	breq	.+96     	; 0xb70 <__ultoa_invert+0x6c>
 b10:	e8 94       	clt
 b12:	6f 93       	push	r22
 b14:	6e 7f       	andi	r22, 0xFE	; 254
 b16:	6e 5f       	subi	r22, 0xFE	; 254
 b18:	7f 4f       	sbci	r23, 0xFF	; 255
 b1a:	8f 4f       	sbci	r24, 0xFF	; 255
 b1c:	9f 4f       	sbci	r25, 0xFF	; 255
 b1e:	af 4f       	sbci	r26, 0xFF	; 255
 b20:	b1 e0       	ldi	r27, 0x01	; 1
 b22:	3e d0       	rcall	.+124    	; 0xba0 <__ultoa_invert+0x9c>
 b24:	b4 e0       	ldi	r27, 0x04	; 4
 b26:	3c d0       	rcall	.+120    	; 0xba0 <__ultoa_invert+0x9c>
 b28:	67 0f       	add	r22, r23
 b2a:	78 1f       	adc	r23, r24
 b2c:	89 1f       	adc	r24, r25
 b2e:	9a 1f       	adc	r25, r26
 b30:	a1 1d       	adc	r26, r1
 b32:	68 0f       	add	r22, r24
 b34:	79 1f       	adc	r23, r25
 b36:	8a 1f       	adc	r24, r26
 b38:	91 1d       	adc	r25, r1
 b3a:	a1 1d       	adc	r26, r1
 b3c:	6a 0f       	add	r22, r26
 b3e:	71 1d       	adc	r23, r1
 b40:	81 1d       	adc	r24, r1
 b42:	91 1d       	adc	r25, r1
 b44:	a1 1d       	adc	r26, r1
 b46:	20 d0       	rcall	.+64     	; 0xb88 <__ultoa_invert+0x84>
 b48:	09 f4       	brne	.+2      	; 0xb4c <__ultoa_invert+0x48>
 b4a:	68 94       	set
 b4c:	3f 91       	pop	r19
 b4e:	2a e0       	ldi	r18, 0x0A	; 10
 b50:	26 9f       	mul	r18, r22
 b52:	11 24       	eor	r1, r1
 b54:	30 19       	sub	r19, r0
 b56:	30 5d       	subi	r19, 0xD0	; 208
 b58:	31 93       	st	Z+, r19
 b5a:	de f6       	brtc	.-74     	; 0xb12 <__ultoa_invert+0xe>
 b5c:	cf 01       	movw	r24, r30
 b5e:	08 95       	ret
 b60:	46 2f       	mov	r20, r22
 b62:	47 70       	andi	r20, 0x07	; 7
 b64:	40 5d       	subi	r20, 0xD0	; 208
 b66:	41 93       	st	Z+, r20
 b68:	b3 e0       	ldi	r27, 0x03	; 3
 b6a:	0f d0       	rcall	.+30     	; 0xb8a <__ultoa_invert+0x86>
 b6c:	c9 f7       	brne	.-14     	; 0xb60 <__ultoa_invert+0x5c>
 b6e:	f6 cf       	rjmp	.-20     	; 0xb5c <__ultoa_invert+0x58>
 b70:	46 2f       	mov	r20, r22
 b72:	4f 70       	andi	r20, 0x0F	; 15
 b74:	40 5d       	subi	r20, 0xD0	; 208
 b76:	4a 33       	cpi	r20, 0x3A	; 58
 b78:	18 f0       	brcs	.+6      	; 0xb80 <__ultoa_invert+0x7c>
 b7a:	49 5d       	subi	r20, 0xD9	; 217
 b7c:	31 fd       	sbrc	r19, 1
 b7e:	40 52       	subi	r20, 0x20	; 32
 b80:	41 93       	st	Z+, r20
 b82:	02 d0       	rcall	.+4      	; 0xb88 <__ultoa_invert+0x84>
 b84:	a9 f7       	brne	.-22     	; 0xb70 <__ultoa_invert+0x6c>
 b86:	ea cf       	rjmp	.-44     	; 0xb5c <__ultoa_invert+0x58>
 b88:	b4 e0       	ldi	r27, 0x04	; 4
 b8a:	a6 95       	lsr	r26
 b8c:	97 95       	ror	r25
 b8e:	87 95       	ror	r24
 b90:	77 95       	ror	r23
 b92:	67 95       	ror	r22
 b94:	ba 95       	dec	r27
 b96:	c9 f7       	brne	.-14     	; 0xb8a <__ultoa_invert+0x86>
 b98:	00 97       	sbiw	r24, 0x00	; 0
 b9a:	61 05       	cpc	r22, r1
 b9c:	71 05       	cpc	r23, r1
 b9e:	08 95       	ret
 ba0:	9b 01       	movw	r18, r22
 ba2:	ac 01       	movw	r20, r24
 ba4:	0a 2e       	mov	r0, r26
 ba6:	06 94       	lsr	r0
 ba8:	57 95       	ror	r21
 baa:	47 95       	ror	r20
 bac:	37 95       	ror	r19
 bae:	27 95       	ror	r18
 bb0:	ba 95       	dec	r27
 bb2:	c9 f7       	brne	.-14     	; 0xba6 <__ultoa_invert+0xa2>
 bb4:	62 0f       	add	r22, r18
 bb6:	73 1f       	adc	r23, r19
 bb8:	84 1f       	adc	r24, r20
 bba:	95 1f       	adc	r25, r21
 bbc:	a0 1d       	adc	r26, r0
 bbe:	08 95       	ret

00000bc0 <__prologue_saves__>:
 bc0:	2f 92       	push	r2
 bc2:	3f 92       	push	r3
 bc4:	4f 92       	push	r4
 bc6:	5f 92       	push	r5
 bc8:	6f 92       	push	r6
 bca:	7f 92       	push	r7
 bcc:	8f 92       	push	r8
 bce:	9f 92       	push	r9
 bd0:	af 92       	push	r10
 bd2:	bf 92       	push	r11
 bd4:	cf 92       	push	r12
 bd6:	df 92       	push	r13
 bd8:	ef 92       	push	r14
 bda:	ff 92       	push	r15
 bdc:	0f 93       	push	r16
 bde:	1f 93       	push	r17
 be0:	cf 93       	push	r28
 be2:	df 93       	push	r29
 be4:	cd b7       	in	r28, 0x3d	; 61
 be6:	de b7       	in	r29, 0x3e	; 62
 be8:	ca 1b       	sub	r28, r26
 bea:	db 0b       	sbc	r29, r27
 bec:	0f b6       	in	r0, 0x3f	; 63
 bee:	f8 94       	cli
 bf0:	de bf       	out	0x3e, r29	; 62
 bf2:	0f be       	out	0x3f, r0	; 63
 bf4:	cd bf       	out	0x3d, r28	; 61
 bf6:	09 94       	ijmp

00000bf8 <__epilogue_restores__>:
 bf8:	2a 88       	ldd	r2, Y+18	; 0x12
 bfa:	39 88       	ldd	r3, Y+17	; 0x11
 bfc:	48 88       	ldd	r4, Y+16	; 0x10
 bfe:	5f 84       	ldd	r5, Y+15	; 0x0f
 c00:	6e 84       	ldd	r6, Y+14	; 0x0e
 c02:	7d 84       	ldd	r7, Y+13	; 0x0d
 c04:	8c 84       	ldd	r8, Y+12	; 0x0c
 c06:	9b 84       	ldd	r9, Y+11	; 0x0b
 c08:	aa 84       	ldd	r10, Y+10	; 0x0a
 c0a:	b9 84       	ldd	r11, Y+9	; 0x09
 c0c:	c8 84       	ldd	r12, Y+8	; 0x08
 c0e:	df 80       	ldd	r13, Y+7	; 0x07
 c10:	ee 80       	ldd	r14, Y+6	; 0x06
 c12:	fd 80       	ldd	r15, Y+5	; 0x05
 c14:	0c 81       	ldd	r16, Y+4	; 0x04
 c16:	1b 81       	ldd	r17, Y+3	; 0x03
 c18:	aa 81       	ldd	r26, Y+2	; 0x02
 c1a:	b9 81       	ldd	r27, Y+1	; 0x01
 c1c:	ce 0f       	add	r28, r30
 c1e:	d1 1d       	adc	r29, r1
 c20:	0f b6       	in	r0, 0x3f	; 63
 c22:	f8 94       	cli
 c24:	de bf       	out	0x3e, r29	; 62
 c26:	0f be       	out	0x3f, r0	; 63
 c28:	cd bf       	out	0x3d, r28	; 61
 c2a:	ed 01       	movw	r28, r26
 c2c:	08 95       	ret

00000c2e <_exit>:
 c2e:	f8 94       	cli

00000c30 <__stop_program>:
 c30:	ff cf       	rjmp	.-2      	; 0xc30 <__stop_program>
